소개
====

요약
----

이 첫 번째 장의 나머지 부분은 커널 개발 프로세스와 개발자와 그들의 회사가
직면할 수 있는 어려움과 문제들을 다룬다. 커널 코드가 공식(메인라인) 커널에 반영
되어야 할 여러가지 이유가 있다. 사용자가 코드에 자동으로 접근할 수 있다는 점,
커뮤니티로 부터 여러 형태로 지원을 받을 수 있다는 점, 커널 개발 방향에
직접적으로 영향을 줄 수 있다는 점 등이다.  리눅스 커널에 컨트리뷰션할 코드는
GPL라이센스 하에 만들어져야 한다.

:ref:`development_process` 는 개발 프로세스, 커널의 릴리즈 주기, 그리고
merge window 매커니즘에 대해 소개한다.  패치 작성, 리뷰, 패치 반영 주기 등을
다양하게 다룰 것이다.  그리고 일부 툴과 메일링 리스트에 대해서도 다룰 것이다.
커널 개발을 시작하고자 한다면, 버그를 추적하거나 수정하는 것으로 부터 시작하는
것이 장려된다.

:ref:`development_early_stage` 는 프로젝트 초기 단계에 대해 다룬다. 개발자들이
가능한 한 빠른 시간에 개발 커뮤니티에 참여하는것에 많은 비중이 할당될 것이다.

:ref:`development_coding` 은 코딩 프로세스에 대한 내용이다.  다른 개발자들의
논의를 통해 알려진 몇몇 위험에 대해서도 다룬다.  패치를 할 때 지켜야 할 몇 가지
요구사항들을 다루며, 패치가 올바르게 작성되었는지 확인할 때 도움이 되는 툴도
소개한다.

:ref:`development_posting` 은 패치를 올리고 리뷰를 받는 프로세스에 대해 논의
한다.  패치가 커뮤니티에서 진지하게 받아들여 지려면, 패치는 반드시 적절한
형식을 지키고 설명도 포함 되어야 한다.  그리고 패치는 정확한 곳으로 전달 되어야
한다.  이번 장의 안내를 따른다면 패치가 받아들여질 확률은 높아 질 것이다.

:ref:`development_followthrough` 는 패치를 전달한 이후 과정에 대해 논의 한다.
패치를 등록 했다고 다 끝난 것이 아니다.  리뷰를 받는 것은 개발 프로세스에서
매우 중요한 절차이고 이 과정에서 문제가 발생하는 것을 줄일 수 있는 팁을
제공한다.  패치가 메인라인에 반영되었다고 모든일이 끝난것으로 단정 짓지 않도록
주의해야 한다.

:ref:`development_advancedtopics` 는 git으로 패치를 관리하고 다른 사람이 등록한
패치를 리뷰하는 방법에 대해 논의 한다.

:ref:`development_conclusion` 은 커널 개발에 관련된 더 많은 정보를 얻을 수 있는
자료들을 소개하며 결론짓는다.


이 문서가 말하려는 것
---------------------

리눅스 커널은 800만 줄 이상의 코드로 구현되어 있으며 각 릴리즈 마다 1000명
이상의 개발자들이 컨트리뷰션 한다.  이것은 현존하는 어떠한 프로젝트보다 규모가
크고 가장 활발하게 진행되는 자유 소프트웨어(오픈 소스) 프로젝트이다.  1991년의
작은 시작 이후 성장을 거듭하면서 현재는 소형 mp3 플레이어, 데스크톱 PC,
현존하는 가장 거대한 슈퍼컴퓨터 등 기타 모든 시스템에서 사용되는 가장 뛰어난
운영체제가 되었다.  리눅스는 어떤 상황에서도 가장 탄탄하고 효율적이고 확장성이
좋은 솔루션이다.

리눅스의 성장으로 인하여 리눅스 개발에 참여하려고 하는 개발자(혹은 회사) 수가
많이 증가하였다.  하드웨어 제조사는 리눅스가 자사 제품을 잘 지원해서 자사
제품들이 리눅스 사용자들에게 보여주기를 원한다.  제품에 리눅스가 사용되는
임베디드 시스템 업체는 리눅스가 더욱 쉽게 포팅 되기를 원한다.  리눅스 기반의
소프트웨어의 업체나 판매자는 가능한 한 성능과 신뢰성에 관심을 두고 있다.
그리고 최종 사용자는 그들의 필요에 따라서 리눅스가 더 좋게 변화하길 원한다.

리눅스의 가장 강력한 특징 중 하나는 개발자들이 접근하기 쉽다는 점이다. 요구되는
선결 조건만 충족된다면 누구나 리눅스를 개선할 수 있으며 개발 방향에 영향을 줄
수 있다.  자유소프트웨어의 특징은 개방성이다. 상업적인 제품에서는 이런 개방성을
볼 수 없는 반면, 리눅스 커널은 대부분의 자유 소프트웨어 프로젝트 보다
개방적이다.  일반적인 3개월의 커널 개발 주기 동안 1000명 이상의 개발자, 100개
이상의 회사가 참여한다.

리눅스 커널 커뮤니티와 작업하는 것은 그렇게 어렵지 않음에도 불구하고 많은
잠재적 컨트리뷰터들이 커널 개발에 어려움을 겪고 있다.  커널 커뮤니티는 매일
수천 줄의 코드가 수정되는 환경 속에서도 뛰어난 코드를 유지하는 뚜렷한 고유의
운영 방식을 발전시켜 왔다.  따라서 리눅스 커널 개발 프로세스와 상업적인
소프트웨어의 개발 방법론에 큰 차이가 있다는 것은 그리 놀라운 일이 아니다.

커널 개발 프로세스가 새로운 개발자들에게는 다소 어렵고 두렵게 느껴질 수도
있지만, 그 뒤에는 타당한 이유가 있고 탄탄한 경험을 할 수 있다는 장점이 있다.
커널 커뮤니티의 방식을 제대로 이해하지 못하였거나, 심지어 프로세스를 무시하는
개발자는 답답하고 힘든 경험을 하게 될 것이다.  이 커뮤니티는 타인의 의견에 귀
귀울이려 하지 않고 개발 프로세스를 전혀 신경 쓰지 않는 개발자에게 기회를 주지
않지만 배우고자 하는 의지가 있는 개발자에게 이 커뮤니티는 많은 도움이 될
것이다.

이 문서를 통해서 커널에 컨트리뷰션 할 때 경험할 수 있는 어려움을 피할 수 있게
되기를 희망한다.  문서는 양이 방대해 읽기가 쉽지는 않다.  하지만, 모두 읽고
나면 그 노력에 대한 보답을 얻을 수 있을 것이다.  리눅스 커뮤니티는 커널을
발전시켜줄 개발자들이 항상 필요하다.  이어질 내용이 커뮤니티에 참여할 수 있도록
도움을 줄 것이다.  우리 커뮤니티와 함께하자.


감사의 말
---------

이 문서는 Jonathan Corbet (corbet@lwn.net)에 의해 작성되었다. 또한, 다음의
사람들을 통해 문서가 더욱 다듬어졌다.  Johannes Berg, James Berry, Alex Chiang,
Roland Dreier, Randy Dunlap, Jake Edge, Jiri Kosina, Matt Mackall, Arthur
Marsh, Amanda McPherson, Andrew Morton, Andrew Price, Tsugikazu Shibata, and
Jochen Voß.

이 작업은 리눅스 재단을 통해 지원받고 있다. 특별히 Amanda McPherson에게
감사한다.  그는 이 일의 가치를 알아봤으며 이 모든 것을 가능하게 만들어 주었다.


메인라인에 코드를 반영하는 것의 중요성
--------------------------------------

일부 업체와 개발자들은 커널 커뮤니티가 어떻게 작동되는지 이해를 해야 하고
그들이 작업한 코드를 메인라인 커널까지 반영해야 하는 성가신 일을 왜 해야하는지
의문을 가질 수 있다.  (메인라인 커널: 리누스 토발즈에 의해 관리되며 리눅스
배포판의 베이스로 사용됨) 단기적으로는 코드를 기여하는 것은 불필요한 비용으로
생각할 수 있다.  그냥 별도의 코드를 유지하고 사용자를 직접 지원하기가 쉬워
보이기 때문이다.  하지만 사실은 메인라인에 반영하지 않고 독립적으로
코드(out-of-tree)를 유지하는 것은 장기적으로 경제적이지 않다.

독립적인 코드(out of tree)를 유지 하는 것의 비용을 설명하기 위해 몇 가지 커널
개발 프로세스의 중요한 측면을 여기서 소개한다.  상세한 사항은 이 문서 나중에 더
상세히 논의될 것이다.

- 메인라인 커널에 통합 된 코드는 모든 리눅스 사용자가 사용할 수 있다.  그
  코드를 사용하기로 설정한 모든 배포판에 자동으로 제공될 것이다.  드라이버
  디스크, 다운로드, 또는 다수의 버전을 지원 해야 하는 등의 번거로움이 필요하지
  않다.  모든 것이 사용자와 개발자를 위해 바로 동작한다.  메인라인으로의 통합은
  다양한 배포 및 지원 관련 문제를 해결할 수 있다.

- 커널 개발자는 유저공간의 안정적인 인터페이스를 유지하기 위해 노력하지만, 내부
  커널 API는 일정한 흐름속에 있다.  안정적인 내부 인터페이스가 부족한 것은
  의도적으로 설계된 것이다.  이는 근본적인 문제를 언제든 개선할 수 있으며
  결과적으로 고품질의 코드를 만들기 때문이다.  그러나 이 정책의 결과로 새
  버전의 커널를 이용하려는 모든 out-of-tree 코드는 지속적인 유지보수 비용이
  발생하게 되었다.  out-of-tree는 코드를 작동하도록 유지보수 하는 데만 해도
  상당한 양의 비용이 필요하다.

  대신에 메인라인데 반영된 코드는 이렇게 비용이 많이 드는 작업이 필요하지 않다.
  커널내의 API를 수정한 개발자가 그 수정의 결과로 발생할 수 있는 문제를
  책임져야 한다는 간단한 규칙 때문이다.  그래서 메인 라인에 병합된 코드는 유지
  보수 비용이 상당히 낮은 것이다.

- 그뿐 아니라, 메인라인에 있는 코드는 종종 다른 개발자에 의해 개선 될 것이다.
  사용자 커뮤니티와 제품을 개선하고자 하는 고객에 의해 놀라운 결과가 나올 수
  있다.

- 커널 코드는 메인라인에 반영하기 전과 후 모두 리뷰를 받아야 한다.  개발자의
  실력이 뛰어난 것과는 관계없이 리뷰 프로세스는 코드 개선을 위해 필요한
  절차이다.  리뷰과정을 통해 종종 버그와 보안문제가 발견되기도 한다.  특별히
  이것은 폐쇄된 개발 환경에서 코드를 개발할 수 있는 방법이기도 하다.  이런
  코드가 외부의 개발자를 통해 리뷰 받는 다면 많은 도움이 될 것이다.  따라서
  메인라인에 반영하지 않고 독립적으로 운영되는 out-of-tree 커널코드의 품질은
  좋을 수가 없다.

- 본인의 방식으로 개발 프로세스에 참여하는 것도 전체 커널 개발에 영향을 줄 수
  있다.  멀찌감치에서 이슈를 제기하는 유져도 종종 있지만,  실제 활발하게
  참여하는 개발자는 큰 영향력을 가지고 있다.  그리고 수정사항을 반영함으로써
  그들이 원하는 대로 커널을 개선 시킬 수 있는 능력을 갖추고 있다.

- 코드가 별도로 관리되는 경우, 협력업체는 이미 존재하는 유사한 기능을 반복
  구현할 가능성이 많다.  그렇게 되면 그 코드를 병합 하는 것은 불가능에 가깝게
  힘들어질 것이다.  이 경우 그닥 유쾌하지 않은 두 가지 중 하나를 선택해야 할
  것이다.  그 비공식 기능을 영원히 out-of-tree 코드로 유지 하거나, out-of-tree
  코드를 포기하고 사용자를 in-tree 버전으로 이동 시키거나.

- 코드를 컨트리뷰션 하는 것은 전체 프로세스를 작동시키는 기본이 되는 작업이다.
  코드를 컨트리뷰션 함으로써 커널에 새로운 기능을 추가하고 다른 커널
  개발자들에게 유용한 기능과 예제를 제공 할 수 있다.  리눅스용 코드를
  개발한(또는 앞으로 개발할) 경우, 당신은 명확하게 이 플랫폼의 지속적인 성공에
  관심이 있을 것이고, 코드에 기여하는 것은 그 성공을 보장하는 가장 좋은 방법 중
  하나이다.

위의 모든 논리는 상업적이며 바이너리로 배포되는 코드를 포함한 모든 out-of-tree
커널 코드에도 적용되는 것이다.  바이너리로 배포하기 전에 고려되어야 할 부가
요소가 있다. 이들은 다음을 포함한다.

- 상업적인 커널 모듈의 배포는 항상 법적으로 문제의 소지가 있다.  대부분의 커널
  저작권자는 바이너리 모듈이 커널의 파생 코드이기 때문에 바이너리 배포가
  (아래에서 다룰) GPL 라이센스의 위반이라고 생각한다.  코드 작성자는 변호사가
  아니며 이 문서는 법적 조언으로 간주 될 수 없다.  폐쇄적인 소스 모듈의 법적
  상태는 법원에 의해 결정될 것이다.  하지만 그 모듈이 법적으로 문제의 소지가
  있는 것은 불확실하다.

- 바이너리 모듈은 대부분의 커널 개발자가 디버깅은 시도조차 하지 않는다는 점에서
  커널 디버깅을 어렵게 한다. 그래서 바이너리 모듈로만 제공되는 배포판은
  사용자가 커뮤니티의 지원을 받기 어렵게 만들 것이다.

- 바이너리만 제공되는 모듈의 배포자도 사용자를 지원하기 위해서는, 모든 배포와
  그들이 지원하고자 하는 모든 커널 버전에 대한 모듈의 버전을 제공해야 하기
  때문에 마찬가지로 어렵다.  하나의 모듈을 수십 번 빌드해야 포괄적으로 사용자를
  지원할 수 있고, 사용자도 커널을 업그레이드할 때마다 모듈을 업그레이드 해야
  하기 때문이다.

- 폐쇄적인 소스 코드에 위에 말한 모든 내용이 중복으로 적용된다.  그 코드는
  접근이 불가능 하기 때문에 커뮤니티의 검토가 이루어질 수 없으며, 의심할
  여지없이 심각한 문제가 될 것이다.

특히 임베디드 시스템 업체들은 제품에 개발이 중지된(frozen) 커널 버전을 사용하면
출시 후 더 이상의 개발이 필요하지 않다고 생각하면서 이번 장에서 언급된 내용을
무시하고 싶을 수 있다.  이런 생각은 대량의 코드리뷰의 가치와 자사의 제품에
사용자가 직접 기능을 추가할 수 있다는 장점을 놓치는 것이다.  그러나 이런 제품
역시 새 버전이 출시되어야 하는 시점까지 어느 정도 제한된 수명을 가지고 있다.
그 시점에서는, 메인라인 코드로 잘 유지된 제품이 훨씬 더 빨리 시장에 새 제품을
내놓을 수 있을 것이다.


라이센싱
--------

코드는 다수의 라이센스 하에 리눅스 커널에 컨트리뷰션 되는데, 특히 모든 코드는
전체 커널 배포를 관장하는 GPLv2 와 호환되어야 한다.  실제로, 모든 코드
컨트리뷰션이 GPLv2(선택적으로, GPL의 차기 버전까지 포함) 또는 BSD 라이선스(3
조항 버전)에 의해 다루어진다는 것을 의미하며, 위 라이선스를 지키지 않은 코드는
커널에 포함되지 않는다.

커널 코드에 컨트리뷰션 하기 위해서 따로 저작권 할당을 할 필요는 없다.  메인라인
커널이 가지고 있는 저작권이 자동으로 적용되기 때문에 자동으로 오픈소스가 된다.

이런 구조의 의미는 커널의 라이센스를 변경하는 것이 불가능하다는 것을 말한다.
모든 저작권 소유자의 동의를 얻을 수 있는 경우는 (또는 코드가 커널에서 제거되는
경우는) 거의 없다.  그래서 가까운 미래에 GPL 버전 3으로 이동 될 가능성은 없다.

모든 코드를 커널에 컨트리뷰션 할 때, 자유 소프트웨어(free software)에
합법적이어야 하는 것은 필수이다.  이러한 이유로, 익명 (또는 가명) 참여자의
코드는 허용되지 않는다.  모든 참여자는 코드가 GPL 아래 커널과 함께 배포될 수
있다고 자신의 코드에 서명(sign-off)해야 한다.  소유자에 의해 자유 소프트웨어로
허가되지 않았거나 (ex. 적절한 보호장치 없이 리버스 엔지니어링으로 파생된
코드로) 커널에 대한 저작권 관련 문제를 만들 위험이 있는 코드로는 커널에
컨트리뷰션 할 수 없다.

저작권 관련 문제에 대한 질문은 리눅스 개발 메일링리스트에 빈번히 올라온다.
이러한 질문은 보통 많은 답변을 받을 수 있지만, 그 답변을 한 사람들이 변호사가
아니며 법률적인 자문을 제공할 수 없음을 명심해야 한다.  리눅스 소스코드에 관한
법적 문제가 있는 경우, 이 분야를 이해하는 변호사와 이야기하는 것이 최선이며,
메일링리스트에서 얻은 답변에 의존하는 것은 위험할 수 있다.
