4: GETTING THE CODE RIGHT
4: 제대로 코딩하기

While there is much to be said for a solid and community-oriented design
process, the proof of any kernel development project is in the resulting
code.  It is the code which will be examined by other developers and merged
(or not) into the mainline tree.  So it is the quality of this code which
will determine the ultimate success of the project.
커뮤니티 중심의 확고한 디자인 프로세스에 대해 논의 해야 할 것이 많이 있지만,
어떠한 커널 프로젝트라도 결국은 코드로 증명된다.  이것은 다른 개발자들에게
리뷰받고 메인라인 트리에 반영되거나 반려되는 코드를 말한다.  따라서 이 코드의
품질이 프로젝트의 궁극적인 성공을 결정하는 것이다.

This section will examine the coding process.  We'll start with a look at a
number of ways in which kernel developers can go wrong.  Then the focus
will shift toward doing things right and the tools which can help in that
quest.
이 섹션에서는 코딩 프로세스에 대해 살펴본다.  우리는 커널 개발자가 실수 할 수
있는 여러가지 경우를 살펴보며 시작할 것이다.  그다음 제대로 개발하는 방법과
작업에 도움을 줄 수 있는 도구들을 살펴볼 것이다.


4.1: PITFALLS
4.1: 유의사항

* Coding style
* 코딩 스타일

The kernel has long had a standard coding style, described in
Documentation/CodingStyle.  For much of that time, the policies described
in that file were taken as being, at most, advisory.  As a result, there is
a substantial amount of code in the kernel which does not meet the coding
style guidelines.  The presence of that code leads to two independent
hazards for kernel developers.
커널은 오랫동안 Documentation/CodingStyle에 기술된 표준 코딩스타일을 가지고
있었다.  많은 시간 동안 해당 파일에 설명된 정책은 기껏해야 자문 정도로만 간주
되었으며,  결과적으로 코딩 스타일 지침을 따르지 않는 코드가 상당량 존재하게
되었다.  이런 코드가 존재함으로써 커널 개발자들에게 두 가지 위험요소를 안겨주게
된다.

The first of these is to believe that the kernel coding standards do not
matter and are not enforced.  The truth of the matter is that adding new
code to the kernel is very difficult if that code is not coded according to
the standard; many developers will request that the code be reformatted
before they will even review it.  A code base as large as the kernel
requires some uniformity of code to make it possible for developers to
quickly understand any part of it.  So there is no longer room for
strangely-formatted code.
이 중 첫 번째는 커널의 표준 코딩 스타일은 별로 중요하지 않으며 반드시 지키지
않아도 된다고 생각하는 것이다.  하지만 실제로는 코딩 스타일을 지키지 않은 경우
커널에 새로운 코드를 추가하기가 매우 어렵다.  심지어 많은 개발자는 리뷰를
해주기 이 전에 코드를 코딩 스타일에 맞게 재수정 하는 것 부터 요청한다.
커널같이 방대한 코드는 개발자가 가능한 한 빨리 그것의 일부를 이해할 수 있도록
코드의 일관성이 필요하다.  그래서 그 규칙을 지키지 않은 코드는 반영되기 어렵다.

Occasionally, the kernel's coding style will run into conflict with an
employer's mandated style.  In such cases, the kernel's style will have to
win before the code can be merged.  Putting code into the kernel means
giving up a degree of control in a number of ways - including control over
how the code is formatted.
때때로, 커널의 코딩 스타일이 회사가 원하는 스타일과 충돌할 수 있다.  이러한
경우, 코드는 반영되기 전에 커널 스타일 포맷에 맞게 수정 되어야 할 것이다.
##커널에 코드를 반영하는 것은 본인이 원하는 대로 코딩 하는것을 포함에 여러가지
코드에 대한 통제를 포기해야 함을 의미한다.

The other trap is to assume that code which is already in the kernel is
urgently in need of coding style fixes.  Developers may start to generate
reformatting patches as a way of gaining familiarity with the process, or
as a way of getting their name into the kernel changelogs - or both.  But
pure coding style fixes are seen as noise by the development community;
they tend to get a chilly reception.  So this type of patch is best
avoided.  It is natural to fix the style of a piece of code while working
on it for other reasons, but coding style changes should not be made for
their own sake.
두 번재 문제는, 이미 반영된 커널코드가 긴급히 코딩 스타일 대로 수정이 되어야
하는 경우에 나타난다.  개발자들은 프로세스에 익숙해지기 위해 또는 커널
Changelog에 본인의 이름을 남기기 위해(혹은 둘 다) 코딩스타일 수정 패치를
생성하기 시작할 것이다.  그러나 순수하게 코딩 스타일만 수정한 패치는 커뮤니티를
방해하는 잡음 정도로 보일 것이며, 커뮤니티에서 냉담한 반응을 얻게 될 것이다.
따라서 이런 유형의 패치를 피해야 한다.  다른 이유로 작업하는 수정사항과 함께
코딩스타일을 수정하는 것은 괜찮아도, 코딩 스타일 수정 자체만으로 패치가 만들어
져서는 안 된다.

The coding style document also should not be read as an absolute law which
can never be transgressed.  If there is a good reason to go against the
style (a line which becomes far less readable if split to fit within the
80-column limit, for example), just do it.
코딩 스타일 문서는 어기면 안 되는 절대적인 법처럼 여겨질 필요는 없다.  예를
들어, 80열 제한에 맞도록 나누면 가독성이 떨어지는 경우 꼭 표준을 지킬 필요는
없다.


* Abstraction layers
* 추상화 레이어

Computer Science professors teach students to make extensive use of
abstraction layers in the name of flexibility and information hiding.
Certainly the kernel makes extensive use of abstraction; no project
involving several million lines of code could do otherwise and survive.
But experience has shown that excessive or premature abstraction can be
just as harmful as premature optimization.  Abstraction should be used to
the level required and no further.
컴퓨터과학 교수는 유연성과 정보은폐를 위해 추상화 계층을 광범위하게 사용 하라고
학생들을 가르친다.  물론 커널은 추상화를 광범위하게 사용한다.  ## 100만 라인
이상의 코드를 포함하는 프로젝트에서는 달리 할 수도 없고 그렇게 하지 않으면
살아남을 수 없기 때문이다.  그러나 경험상 과도하거나 섣부른 추상화는 조기
최적화만큼 해가 될 수 있다.  추상화는 필요한 수준으로만 사용되어야 한다.

At a simple level, consider a function which has an argument which is
always passed as zero by all callers.  One could retain that argument just
in case somebody eventually needs to use the extra flexibility that it
provides.  By that time, though, chances are good that the code which
implements this extra argument has been broken in some subtle way which was
never noticed - because it has never been used.  Or, when the need for
extra flexibility arises, it does not do so in a way which matches the
programmer's early expectation.  Kernel developers will routinely submit
patches to remove unused arguments; they should, in general, not be added
in the first place.
단순하게 항상 모든 호출자에 의해 0으로 전달되는 인자(argument)를 가진 함수가
있다고 가정하자.  혹시 누군가가 나중에 사용할 수 있으니 유연하게 그 인자를
유지할 수 있다.  그러나 이 경우 미묘한 방식으로 잘못되어도 애초에 사용된 적이
없으므로 문제가 발견되지 않을 확률이 높다.  막상 여분의 유연성을 위해 필요할
때도 프로그래머의 기대처럼 작동하지 않는다.  커널 개발자들은 사용되지 않는
인자를 제거하는 패치를 주기적으로 제출한다.  일반적으로, 그런 인자는 애초에
추가되지 않았어야 한다.

Abstraction layers which hide access to hardware - often to allow the bulk
of a driver to be used with multiple operating systems - are especially
frowned upon.  Such layers obscure the code and may impose a performance
penalty; they do not belong in the Linux kernel.
특히 못마땅하게 받아 드려지는 것은 하드웨어 드라이버를 여러 운영 체제에서
사용할 수 있도록 하드웨어 접근을 숨기는 추상화 계층이다.  이러한 계층은 코드를
모호하게 하고 성능을 떨어뜨릴 수 있어서 리눅스 커널에 포함될 수 없다.

On the other hand, if you find yourself copying significant amounts of code
from another kernel subsystem, it is time to ask whether it would, in fact,
make sense to pull out some of that code into a separate library or to
implement that functionality at a higher level.  There is no value in
replicating the same code throughout the kernel.
한편, 당신이 다른 커널 서브 시스템에서 상당한 양의 코드를 복사한 경우, 별도의
라이브러리로 코드 일부를 이동시킬지 높은 수준에서 구현할지 결정해야 한다.
커널에 걸쳐 같은 코드가 중복되는 것은 가치가 없다.


* #ifdef and preprocessor use in general
* #ifdef 와 전처리기의 전반적인 사용

The C preprocessor seems to present a powerful temptation to some C
programmers, who see it as a way to efficiently encode a great deal of
flexibility into a source file.  But the preprocessor is not C, and heavy
use of it results in code which is much harder for others to read and
harder for the compiler to check for correctness.  Heavy preprocessor use
is almost always a sign of code which needs some cleanup work.
##C 전처리기는 C 프로그래머가 유연성을 코드에 넣을 수 있도록 부호화하고, 매우
효율적인 코드가 되는 방법이므로 사용하고 싶을 것이다.  그러나 전처리기는 C가
아니며, 많이 사용하면 가독성이 떨어지고 컴파일러가 정확성을 확인하기
힘들어진다.  코드에 과도한 전처리기가 사용된다는 것은 대개 항상 정리 작업이
필요하다는 신호이다.

Conditional compilation with #ifdef is, indeed, a powerful feature, and it
is used within the kernel.  But there is little desire to see code which is
sprinkled liberally with #ifdef blocks.  As a general rule, #ifdef use
should be confined to header files whenever possible.
Conditionally-compiled code can be confined to functions which, if the code
is not to be present, simply become empty.  The compiler will then quietly
optimize out the call to the empty function.  The result is far cleaner
code which is easier to follow.
#ifdef와 조건부 컴파일은 정말 강력한 기능이며 커널 내에서도 많이 사용되고 있다.
그러나 #ifdef 블록으로 무분별하게 도배된 코드는 별로 보고 싶지 않을 것이다.
일반적으로, #ifdef 사용은 가능한 한 헤더 파일에만 국한 되어야 한다.  만약
##코드가 보이지 않는다면, 조건부 컴파일된 코드는 단순하고 빈(empty) 함수에
국한되어 사용될 수 있다.  컴파일러는 조용히 빈 함수 호출을 최적화 할 것이다.
그 결과로 따라가기 쉬운 훨씬 깔끔한 코드가 될 것이다.

C preprocessor macros present a number of hazards, including possible
multiple evaluation of expressions with side effects and no type safety.
If you are tempted to define a macro, consider creating an inline function
instead.  The code which results will be the same, but inline functions are
easier to read, do not evaluate their arguments multiple times, and allow
the compiler to perform type checking on the arguments and return value.
C 전처리기 매크로는 수식을 여러 번 계산할 때 발생하는 부작용과, ##타입의
불안정성을 포함하여, 많은 위험요소를 가지고 있다.  만일 매크로를 정의하고자
한다면, 차라리 인라인 함수를 사용하는 것이 낫다.  결과 코드는 같지만, 인라인
함수가 더 가독성이 좋으며, 인자를 여러 번 계산하지 않고, 컴파일러가 인자 및
반환 값에 타입 검사를 수행할 수 있다.


* Inline functions
* 인라인 함수

Inline functions present a hazard of their own, though.  Programmers can
become enamored of the perceived efficiency inherent in avoiding a function
call and fill a source file with inline functions.  Those functions,
however, can actually reduce performance.  Since their code is replicated
at each call site, they end up bloating the size of the compiled kernel.
That, in turn, creates pressure on the processor's memory caches, which can
slow execution dramatically.  Inline functions, as a rule, should be quite
small and relatively rare.  The cost of a function call, after all, is not
that high; the creation of large numbers of inline functions is a classic
example of premature optimization.
그러나 인라인 함수 자체도 위험요소를 갖고 있다.  프로그래머는 뛰어난 효율성에
매료되기 쉽고, ##그 기저에는 함수 호출을 피하고 소스코드를 인라인 함수로
채우고자 함이 깔려있다.  그러나 실제로 인라인 함수는 성능을 감소시킬 수도 있다.
이들 코드는 각 호출 위치에 복제되기 때문에 그들은 컴파일된 커널의 크기를
증가시키고 프로세서의 메모리 캐시에 압력을 주어 극적으로 실행속도를 느려지게 할
수 있다.  인라인 함수는 원칙적으로 아주 작고 드물게 사용해야 한다.  결국 함수
호출의 비용은 그렇게 높지 않다.  인라인 함수를 과도하게 사용하는 것은 오히려
최적화의 시기상조라고 볼 수 있다.

In general, kernel programmers ignore cache effects at their peril.  The
classic time/space tradeoff taught in beginning data structures classes
often does not apply to contemporary hardware.  Space *is* time, in that a
larger program will run slower than one which is more compact.
일반적으로 커널 프로그래머는 캐시 효과를 무시한다.  자료 구조 수업의 시작에서
배운 시간-공간의 트레이드오프 관계는 종종 현대 하드웨어에 적용되지 않는다.
##더 큰 프로그램이 작은 프로그램보다 느리게 실행된다는 점에서 공간이 곧
시간이다.

More recent compilers take an increasingly active role in deciding whether
a given function should actually be inlined or not.  So the liberal
placement of "inline" keywords may not just be excessive; it could also be
irrelevant.
최근의 컴파일러는 주어진 함수가 실제 인라인 함수로 사용되는지 여부를 결정하는데
적극적인 역할을 한다.  그래서 인라인 함수의 자유로운 배치는 과도하지 않게 조절
되며 또한 관련이 없을 수 있다.


* Locking
* Lock 메커니즘

In May, 2006, the "Devicescape" networking stack was, with great
fanfare, released under the GPL and made available for inclusion in the
mainline kernel.  This donation was welcome news; support for wireless
networking in Linux was considered substandard at best, and the Devicescape
stack offered the promise of fixing that situation.  Yet, this code did not
actually make it into the mainline until June, 2007 (2.6.22).  What
happened?
2006년 5월 "Devicescape" 네트워킹 스택은 GPL라이센스로 메인라인에 포함되었다.
이 기여는 희소식이었다.  이전 리눅스 무선 네트워킹에 대한 지원은 수준 이하였고
Devicescape 스택은 그런 상황을 개선하는 제안이었다.  그러나 이 코드는 실제로
2007년 6월(2.6.22)까지 메인라인에 포함되지 않았다.  무슨 일이 있었을까?

This code showed a number of signs of having been developed behind
corporate doors.  But one large problem in particular was that it was not
designed to work on multiprocessor systems.  Before this networking stack
(now called mac80211) could be merged, a locking scheme needed to be
retrofitted onto it.
##이 코드는 회사에서 비밀리에 개발되었다.  그러나 하나의 큰 문제는 이것이
멀티프로세서 시스템에서 작동하도록 설계되지 않았다는 것이다.  이 네트워킹
스택(mac80211라고 불리는)은 적용되기 전에 Lock 메커니즘이 추가되어야 했다.

Once upon a time, Linux kernel code could be developed without thinking
about the concurrency issues presented by multiprocessor systems.  Now,
however, this document is being written on a dual-core laptop.  Even on
single-processor systems, work being done to improve responsiveness will
raise the level of concurrency within the kernel.  The days when kernel
code could be written without thinking about locking are long past.
예전에는 리눅스 커널 코드는 멀티프로세서 시스템에 의해 발생하는 동시성 문제를
고려하지 않고 개발될 수 있었다.  그러나 지금, 이 문서는 듀얼 코어 노트북에서
기록되고 있다.  심지어 싱글프로세서 시스템에서 응답성을 개선하기 위한 작업은
커널 내에서 동시성의 수준을 올릴 것이다.  커널 코드가 Lock에 대해 생각하지 않고
작성되던 시절은 오래전에 끝났다.

Any resource (data structures, hardware registers, etc.) which could be
accessed concurrently by more than one thread must be protected by a lock.
New code should be written with this requirement in mind; retrofitting
locking after the fact is a rather more difficult task.  Kernel developers
should take the time to understand the available locking primitives well
enough to pick the right tool for the job.  Code which shows a lack of
attention to concurrency will have a difficult path into the mainline.
하나 이상의 스레드에 의해 동시에 액세스 될 수 있는 모든 자원(자료 구조,
하드웨어 레지스터 등) 은 Lock에 의해 보호 되어야 한다.  새로운 코드는 이
요구사항을 염두에 두고 작성 해야 한다.  사후 Lock 추가는 오히려 더 어려운
작업이다.  커널 개발자는 작업에 적합한 도구를 선택할 수 있도록 충분히 가능한
Lock 기본 요소를 이해하는 시간을 가져야 한다.  동시성에 대한 관심이 부족한
코드는 메인라인에 반영되기 어렵다.


* Regressions
* 퇴행(Regressions)
change (which may bring big improvements) which causes something to break
for existing users.  This kind of change is called a "regression," and
regressions have become most unwelcome in the mainline kernel.  With few
exceptions, changes which cause regressions will be backed out if the
regression cannot be fixed in a timely manner.  Far better to avoid the
regression in the first place.
마지막으로 중요한 위험요소가 있다.  큰 개선을 가져올지 모르는 수정사항을 만들고
싶을 수 있는데, 그 수정사항이 메인라인에 반영됨으로 기존 유져 어플리케이션이
정상 동작하지 않는 경우를 말한다.  이러한 종류의 변경은 "Regression" 이라고
하며 메인라인 커널에서 가장 환영받지 못할 것이다.  몇 예외의 경우가 아니면
Regression의 원인이 되는 수정사항은 적절한 시기까지 문제가 해결되지 않으면
메인라인에서 제거될 것이다.  제일 좋은 방법은 Regression을 애초에 피하는
것이다.

It is often argued that a regression can be justified if it causes things
to work for more people than it creates problems for.  Why not make a
change if it brings new functionality to ten systems for each one it
breaks?  The best answer to this question was expressed by Linus in July,
2007:
종종 문제를 발생시키는 것보다 더 많은 사람이 그 일에 참여하게 하는 Regression이
정당화 되는 것에 대한 논쟁이 있다.  ##열개의 시스템 각각에 새로운 기능이
추가된다면 변화를 주는 것은 어떤가?  이에 대한 가장 좋은 답변은 리누스 토발즈가
2007년 7월에 작성한 내용이다.

	So we don't fix bugs by introducing new problems.  That way lies
	madness, and nobody ever knows if you actually make any real
	progress at all. Is it two steps forwards, one step back, or one
	step forward and two steps back?  Different people will give different
	answers.  That's why regressions are _so_ much more important than new
	bugfixes.
	따라서 우리는 새로운 문제를 공개할 때, 버그를 수정하지 않는다.
	##이것은 정신 나간 방법이 아니다.  또한 당신이 실제 어떠한 진전을
	이뤄냈는지 아무도 모른다.  이것은 두 걸음 진전 한 걸음 후퇴 인가 한
	걸음 진전 두 걸음 후퇴인가? 서로 다른 사람들이 서로 다른 해결책을
	내놓을 수 있다.  이것이 새로운 버그 수정보다 Regression이 더 중요한
	이유이다.

(http://lwn.net/Articles/243460/).

An especially unwelcome type of regression is any sort of change to the
user-space ABI.  Once an interface has been exported to user space, it must
be supported indefinitely.  This fact makes the creation of user-space
interfaces particularly challenging: since they cannot be changed in
incompatible ways, they must be done right the first time.  For this
reason, a great deal of thought, clear documentation, and wide review for
user-space interfaces is always required.
일종의 user-space ABI 수정사항에 관련된 Regression은 특히 환영받기 어렵다.
##일단 인터페이스가 user 공간으로 전달되면 완전하게 지원되지 않을 것이다.  ##이
사실은 유져 공간 인터페이스의 제작을 특히 더 어렵게 만든다.  ##그것이 양립할 수
없는 방법으로 변경될 수 없을 때부터, 처음부터 틀리지 않게 만들어 졌을 것이다.
이러한 이유로 user-space 인터페이스의 많은 의견과 확실한 문서, 광범위한 리뷰가
항상 필요한 것이다.


4.2: CODE CHECKING TOOLS
4.2: 코드 검증 도구

For now, at least, the writing of error-free code remains an ideal that few
of us can reach.  What we can hope to do, though, is to catch and fix as
many of those errors as possible before our code goes into the mainline
kernel.  To that end, the kernel developers have put together an impressive
array of tools which can catch a wide variety of obscure problems in an
automated way.  Any problem caught by the computer is a problem which will
not afflict a user later on, so it stands to reason that the automated
tools should be used whenever possible.
지금 당장은, 최소한 에러 없는 코드를 작성하는 것은 우리 중 아주 소수만 달성
가능한 비현실적인 일일 것이다.  그러나, 우리가 기대할 수 있는 것은, 코드가
메인라인 커널에 반영되기 이전에 가능한 한 많은 수의 에러가 발견되고 수정되는
것이다.  그 목적을 달성하기 위해서, 커널 개발자들은 광범위하게 발생할 수 있는
불분명한 문제들을 자동으로 잡아낼 수 있는 다양한 도구를 한데 모았다.  컴퓨터가
잡아내는 문제들이 나중에 사용자에게 불편을 주는 문제는 아니므로 이런 자동화
도구는 될 수 있으면 사용하는 것이 좋다.

The first step is simply to heed the warnings produced by the compiler.
Contemporary versions of gcc can detect (and warn about) a large number of
potential errors.  Quite often, these warnings point to real problems.
Code submitted for review should, as a rule, not produce any compiler
warnings.  When silencing warnings, take care to understand the real cause
and try to avoid "fixes" which make the warning go away without addressing
its cause.
첫 번째로 할 수 있는 것은 단순히 컴파일러의 Warning 메시지를 주의 깊게 살피는
것이다.  최신 버전의 gcc는 많은 양의 잠재적 에러를 미리 발견할 수 있다.  꽤
자주, 이런 Warning 메시지는 실제 문제를 나타낸다.  리뷰용으로 제출된 코드는
어떠한 Warning 메시지도 없어야 할 것이다.  Warning이 발생할 때는, 실제 원인을
이해하도록 신경 써야 한다. 그리고 근본적인 원인의 수정이 아닌 단순히 Warning
메시지만 없애는 디버깅은 피해야 한다.

Note that not all compiler warnings are enabled by default.  Build the
kernel with "make EXTRA_CFLAGS=-W" to get the full set.
모든 컴파일러의 기본으로 경고 메시지를 출력하도록 설정되어있다.  모든 경고
메시지를 출력하기 위해서는 커널을 "make EXTRA_CFLAGS=-W" 로 빌드해라.

The kernel provides several configuration options which turn on debugging
features; most of these are found in the "kernel hacking" submenu.  Several
of these options should be turned on for any kernel used for development or
testing purposes.  In particular, you should turn on:
커널은 디버깅 기능을 위한 몇 가지 configuration 옵션을 제공한다.  대부분은
"kernel hacking" 서브메뉴에서 볼 수 있다.  몇몇의 옵션은 개발 또는 테스트용으로
반드시 사용해야 한다.  특별히, 다음의 옵션을 사용해야 한다.

 - ENABLE_WARN_DEPRECATED, ENABLE_MUST_CHECK, and FRAME_WARN to get an
   extra set of warnings for problems like the use of deprecated interfaces
   or ignoring an important return value from a function.  The output
   generated by these warnings can be verbose, but one need not worry about
   warnings from other parts of the kernel.
 - ENABLE_WARN_DEPRECATED, ENABLE_MUST_CHECK, FRAME_WARN :
   더는 사용하지 않는 인터페이스나 함수에서 중요한 리턴값이 빠지는 등의 별도의
   추가적인 Warning 메시지를 얻는 데 필요.  이렇게 만들어지는 Warning 메시지는
   너무 많을 수도 있다.  그래도 커널의 다른 부분의 Warning 메시지는 무시해도
   상관없다.

 - DEBUG_OBJECTS will add code to track the lifetime of various objects
   created by the kernel and warn when things are done out of order.  If
   you are adding a subsystem which creates (and exports) complex objects
   of its own, consider adding support for the object debugging
   infrastructure.
 - DEBUG_OBJECTS :
   커널이 생성한 다양한 객체의 수명을 추적하는 코드를 추가한다.  그리고 잘못된
   순서로 완료된 작업이 있을 때 경고 메시지를 준다.  만약 그 자체로 복잡한
   객체를 생성하는 서브시스템을 추가하려고 한다면, 객체 디버깅 기반의 기술
   추가를 고려해라.

 - DEBUG_SLAB can find a variety of memory allocation and use errors; it
   should be used on most development kernels.
 - DEBUG_SLAB :
   다양한 메모리 할당과 사용 시 에러를 찾는다.  이것은 커널 개발에 가장 많이
   사용 되어야 한다.

 - DEBUG_SPINLOCK, DEBUG_ATOMIC_SLEEP, and DEBUG_MUTEXES will find a
   number of common locking errors.
 - DEBUG_SPINLOCK, DEBUG_ATOMIC_SLEEP, DEBUG_MUTEXES :
   일반적인 Locking 에러를 찾는다.

There are quite a few other debugging options, some of which will be
discussed below.  Some of them have a significant performance impact and
should not be used all of the time.  But some time spent learning the
available options will likely be paid back many times over in short order.
이외에도 다양한 디버깅 옵션이 존재한다.  그중 일부는 아래에서 살펴볼 것이다.
그것 중 몇몇은 의미 있는 성능 효과를 보이기도 하고 항상 사용하면 안 되는 것도
있다.  때때로 이런 사용 가능한 옵션을 익히는데 많은 시간이 필요할 수 있다.
그러나 그 시간은 아마 곧 두고두고 보상받을 수 있을 것이다.

One of the heavier debugging tools is the locking checker, or "lockdep."
This tool will track the acquisition and release of every lock (spinlock or
mutex) in the system, the order in which locks are acquired relative to
each other, the current interrupt environment, and more.  It can then
ensure that locks are always acquired in the same order, that the same
interrupt assumptions apply in all situations, and so on.  In other words,
lockdep can find a number of scenarios in which the system could, on rare
occasion, deadlock.  This kind of problem can be painful (for both
developers and users) in a deployed system; lockdep allows them to be found
in an automated manner ahead of time.  Code with any sort of non-trivial
locking should be run with lockdep enabled before being submitted for
inclusion.
가장 규모 있는 디버깅 도구에는 Locking checker 나 Lockdep 이 있다.  이 도구는
시스템에서 락(Lock)을(스핀락 또는 뮤텍스) 획득 하거나 릴리즈 하는것을 추적한다.
##락의 획득 순서는 현재 인터럽트 환경이나 그 외의 것 에서 각자에게 영향을 준다.
그것은 락이 항상 같은 순서로 획득 되었다는 것을 보장해준다.  그리고 인터럽트는
모든 상황에 적용될 수 있다고 똑같이 가정할 수 있다.  다시말하면, Lockdep은
시스템이 간혹 교착상태(Deadlock)에 빠질 수 있는 시나리오를 검출할 수 있는
것이다.  이런 종류의 문제는 시스템에 있어서 사용자나 개발자 모두를 괴롭힌다.
Lockdep은 이런 문제를 기한보다 일찍, 그리고 자동으로 발견할 수 있도록 도와준다.
반영하고자 하는 모든 종류의 중요한 락이 포함된 코드는 Lockdep을 enable시켜 동작
시켜봐야 한다.

As a diligent kernel programmer, you will, beyond doubt, check the return
status of any operation (such as a memory allocation) which can fail.  The
fact of the matter, though, is that the resulting failure recovery paths
are, probably, completely untested.  Untested code tends to be broken code;
you could be much more confident of your code if all those error-handling
paths had been exercised a few times.
의심의 여지 없이, 당신은 아주 성실한 커널 개발자로서 실패할 수 있는 모든
작업의(예를 들어 메모리 할당) 리턴 상태를 점검해 볼 것이다.  ##그러나 사실은
실패를 초래하는 복구 경로는 실제로 완전히 검증되지 않았다.  검증되지 않은
코드는 문제를 일으키는 경향이 있다.  발생 가능한 모든 문제 경로를 몇 번
훈련하고 나면, 아마 코드에 더 큰 자신감을 가질 수 있을 것이다.

The kernel provides a fault injection framework which can do exactly that,
especially where memory allocations are involved.  With fault injection
enabled, a configurable percentage of memory allocations will be made to
fail; these failures can be restricted to a specific range of code.
Running with fault injection enabled allows the programmer to see how the
code responds when things go badly.  See
Documentation/fault-injection/fault-injection.txt for more information on
how to use this facility.
##특별히 메모리 할당된 곳에, 커널은 그것을 할 수 있도록 일부러 오류를
삽입시키는 (Fault injection framework)를 제공한다.  Fault injection이 설정
되면, ##상당수의 메모리 할당은 실패 할 것이다.  이 실패는 특정 영역의 코드를
제한시킬 수 있다.  Fault injection의 설정과 함께 동작시키게 되면 개발자는
문제가 발생할 때 코드가 어떻게 대응하는지 확인할 수 있다.  이 기능의 보다
자세한 내용은 Documentation/fault-injection/fault-injection.txt에서 확인 가능
하다.

Other kinds of errors can be found with the "sparse" static analysis tool.
With sparse, the programmer can be warned about confusion between
user-space and kernel-space addresses, mixture of big-endian and
small-endian quantities, the passing of integer values where a set of bit
flags is expected, and so on.  Sparse must be installed separately (it can
be found at https://sparse.wiki.kernel.org/index.php/Main_Page if your
distributor does not package it); it can then be run on the code by adding
"C=1" to your make command.
에러를 찾을 수 있는 또 다른 도구는 "sparse"라는 정적 분석 도구이다.  Sparse를
이용하면, 개발자는 다음의 문제 상황을 인지할 수 있다.  커널 공간 주소와, 유져
공간 주소를 혼동, 빅-엔디안과 리틀-엔디안의 혼용, 비트 Flag로 설정된 Integer
변수 파싱, 등.  Sparse는 반드시 구분돼서 설치 되어야 한다. (만약 당신의
배포판이 패키지를 가지고 있지 않은 경우
https://sparse.wiki.kernel.org/index.php/Main_Page 에서 확인 가능) 그리고 이
기능은 make 명령에서 "C=1" 을 추가하면 실행된다.

The "Coccinelle" tool (http://coccinelle.lip6.fr/) is able to find a wide
variety of potential coding problems; it can also propose fixes for those
problems.  Quite a few "semantic patches" for the kernel have been packaged
under the scripts/coccinelle directory; running "make coccicheck" will run
through those semantic patches and report on any problems found.  See
Documentation/coccinelle.txt for more information.
Coccinelle는 잠재적 코딩 문제를 광범위하게 찾고 또한 잡아낼 수 있는 도구이다.
몇몇 "semantic patches"는 커널 내에 포함된 scripts/cossinelle경로에 있다.
"make coccicheck" 를 통해 이런 semantic patch나 여러 문제들을 발견할 수 있다.
보다 자세한 내용은 Documentation/coccinelle.txt에서 확인 가능하다.

Other kinds of portability errors are best found by compiling your code for
other architectures.  If you do not happen to have an S/390 system or a
Blackfin development board handy, you can still perform the compilation
step.  A large set of cross compilers for x86 systems can be found at

	http://www.kernel.org/pub/tools/crosstool/

Some time spent installing and using these compilers will help avoid
embarrassment later.
여러 아키텍처에서 코드를 컴파일해보는 것이 잠재적 오류를 발견하는 데에 가장
좋은 방법이다.  ##만약 S/390시스템이나 Blackfin개발 보드에서 하고 싶지 않다면
여러 절차를 통해 동작할 수 있다.  많은 수의 x86용 컴파일러는 아래에서 찾을 수
있다.

	http://www.kernel.org/pub/tools/crosstool/

때때로는 이 컴파일러들을 이용해 설치하는 시간이 나중에 골칫거리를 피하는데
도움이 될 것이다.


4.3: DOCUMENTATION
4.3: 문서화 하기

Documentation has often been more the exception than the rule with kernel
development.  Even so, adequate documentation will help to ease the merging
of new code into the kernel, make life easier for other developers, and
will be helpful for your users.  In many cases, the addition of
documentation has become essentially mandatory.
##예상외로 문서 작성은 커널 개발에 있어서 규칙으로 여겨져 왔다.  또한, 적절한
문서는 코드를 커널에 반영하는 데 도움이 되며, 다른 개발자를 보다 편리하게
해주고, 사용자에게도 유용할 것이다.  많은 경우에 문서를 추가하는 것이 필수
사항이 되어가고 있다.

The first piece of documentation for any patch is its associated
changelog.  Log entries should describe the problem being solved, the form
of the solution, the people who worked on the patch, any relevant
effects on performance, and anything else that might be needed to
understand the patch.  Be sure that the changelog says *why* the patch is
worth applying; a surprising number of developers fail to provide that
information.
최초의 패치에 관련된 문서는 그 패치의 Change log와 관련되어 있다. Log
엔트리에는 다음을 기술해야 한다.  해결해야할 문제, 문제 해결책의 형태, 해당
패치 작업에 동행한 사람들, 관련 성능 효과, 그 외에 패치를 이해하는 데 필요한
모든 것.  Change log에는 반드시 "왜" 이 패치가 적용되는 게 이로운가에 대한
기술이 있어야 한다.  상당히 많은 수의 개발자가 이 정보를 제공하는것을 빼먹는다.

Any code which adds a new user-space interface - including new sysfs or
/proc files - should include documentation of that interface which enables
user-space developers to know what they are working with.  See
Documentation/ABI/README for a description of how this documentation should
be formatted and what information needs to be provided.
sysfs나 /proc 파일과 같은 유져-공간 인터페이스에 관련된 코드를 추가하려고
할때는, 유져-공간 개발자가 같이 작업할 수 있도록 해당 인터페이스에 대한 문서를
꼭 포함 시켜야 한다.  Documentation/ABI/README에는 이 문서의 형식과 어떤 정보를
기술해야 하는지 설명되어 있다.

The file Documentation/kernel-parameters.txt describes all of the kernel's
boot-time parameters.  Any patch which adds new parameters should add the
appropriate entries to this file.
Documentation/kernel-parameters.txt 에는 커널의 부팅 타임 매개변수의 모든것이
기술 되어있다.  새로운 매개변수가 포함되는 패치를 적용하고자 한다면 이 문서에
해당 내용을 추가해야 한다.

Any new configuration options must be accompanied by help text which
clearly explains the options and when the user might want to select them.
새로운 Configuration 옵션을 추가하고자 한다면 사용자가 선택할 수 있도록 명확한
설명을 추가해야 한다.

Internal API information for many subsystems is documented by way of
specially-formatted comments; these comments can be extracted and formatted
in a number of ways by the "kernel-doc" script.  If you are working within
a subsystem which has kerneldoc comments, you should maintain them and add
them, as appropriate, for externally-available functions.  Even in areas
which have not been so documented, there is no harm in adding kerneldoc
comments for the future; indeed, this can be a useful activity for
beginning kernel developers.  The format of these comments, along with some
information on how to create kerneldoc templates can be found in the file
Documentation/kernel-doc-nano-HOWTO.txt.
다양한 서브시스템의 내부 API정보는 특정 형식으로 작성하도록 기록되어 있다. 이
작성물은 "kernel-doc" 스크립트의 다양한 방법에 의해 작성되거나 형식이 변환될 수
있다. ##만약 kerneldoc 으로 작성된 서브시스템에서 작업한다면, 외부 함수등을
거기에 추가하거나 계속 유지해야 한다.  이런 문서가 없는 부분이 있다면 kerneldoc
코멘트를 추가하는 것이 나중을 위해서 더 좋을 것이다.  이런 글의 형식과 어떻게
kerneldoc 서식을 만들 수 있는지에 대한 정보는
Documentation/kernel-doc-nano-HOWTO.txt 에서 확인할 수 있다.

Anybody who reads through a significant amount of existing kernel code will
note that, often, comments are most notable by their absence.  Once again,
the expectations for new code are higher than they were in the past;
merging uncommented code will be harder.  That said, there is little desire
for verbosely-commented code.  The code should, itself, be readable, with
comments explaining the more subtle aspects.
##현재 커널 코드를 읽는 누구라도 주석이 가장 주목할 만한 것으로 생각할 것이다.
다시 말하자면, 새 코드에 대한 기대감은 과거보다 더 커졌기 때문에, 주석이 없는
코드는 더욱 반영하기 어려워졌다.  그것은 더욱 자세한 주석을 원하는 사람이
많다는 뜻이다.  코드는 그 자체로 미묘한 측면들을 보충 설명해주는 주석과 함께
가독성이 좋아져야 한다.

Certain things should always be commented.  Uses of memory barriers should
be accompanied by a line explaining why the barrier is necessary.  The
locking rules for data structures generally need to be explained somewhere.
Major data structures need comprehensive documentation in general.
Non-obvious dependencies between separate bits of code should be pointed
out.  Anything which might tempt a code janitor to make an incorrect
"cleanup" needs a comment saying why it is done the way it is.  And so on.
다음의 내용에는 항상 주석을 추가하여야 한다.  메모리 장벽(memory barriers) 를
사용한다면 메모리 장벽이 왜 필요한지 라인 단위로 설명되어야 한다.  일반적으로
자료구조의 Locking 규칙은 설명이 필요하다.  주요 자료구조는 포괄적인 문서가
필요하다.  ##코드간의 불명확한 의존성은 명확히 지정해야 한다.  정확하지 않은
Cleanup 코드를 만들기 위한 임시 코드는 왜 그랬는지, 어떻게 했는지에 대한 설명이
있어야 한다.

4.4: INTERNAL API CHANGES
4.4: 커널 API 변경하기

The binary interface provided by the kernel to user space cannot be broken
except under the most severe circumstances.  The kernel's internal
programming interfaces, instead, are highly fluid and can be changed when
the need arises.  If you find yourself having to work around a kernel API,
or simply not using a specific functionality because it does not meet your
needs, that may be a sign that the API needs to change.  As a kernel
developer, you are empowered to make such changes.
커널이 제공하는 유져 공간에서의 바이너리 인터페이스는 심각한 문제 상황 말고는
문제가 발생하기 어렵다.  대신, 커널의 내부 프로그래밍 인터페이스는 매우
유동적이며, 필요에 따라 변경하는 것이 가능하다.  커널 API 로 작업할 일이 생겼을
때, 또는 단순하게 원치 않아서 특정 기능을 만들어 쓰지 않을 때는 API가 수정이
필요하다는 뜻이다.  커널 개발자로서 당신은 변경할 수 있는 권한을 가지고 있다.

There are, of course, some catches.  API changes can be made, but they need
to be well justified.  So any patch making an internal API change should be
accompanied by a description of what the change is and why it is
necessary.  This kind of change should also be broken out into a separate
patch, rather than buried within a larger patch.
물론 생각해야 할 것이 있다.  API를 수정할 수는 있지만, 합당한 이유가 있어야
한다.  그래서 어떠한 API 수정 패치라도 어떤 것을 수정했는지, 왜 필요한지 설명이
있어야 한다.  이런 패치는 여러 종류의 수정사항이 포함된 거대한 패치에 포함되는
것 보다, 개별적인 패치로 분리해야 한다.

The other catch is that a developer who changes an internal API is
generally charged with the task of fixing any code within the kernel tree
which is broken by the change.  For a widely-used function, this duty can
lead to literally hundreds or thousands of changes - many of which are
likely to conflict with work being done by other developers.  Needless to
say, this can be a large job, so it is best to be sure that the
justification is solid.  Note that the Coccinelle tool can help with
wide-ranging API changes.
또 하나는, 내부 API를 수정한 개발자는 커널 트리 내에 있는 어떤 코드의
수정사항으로 인한 문제 발생에 일반적으로 책임을 진다.  만약 광범위하게 사용되는
함수라면, 이 의무는 수백 수천 개의 수정사항으로 늘어 날 수 있다(많은 경우
충돌을 발생시키는 것은 다른 개발자에 의해 수정된다).  두말할 필요도 없이,
이것은 거대한 작업이 될 수 있다.  따라서 그 작업을 해야 하는 명확한 필요성이
있는지 확실히 하는 것이 좋다.  Coccinelle는 광범위한 API수정에 도움이 될 수
있다.

When making an incompatible API change, one should, whenever possible,
ensure that code which has not been updated is caught by the compiler.
This will help you to be sure that you have found all in-tree uses of that
interface.  It will also alert developers of out-of-tree code that there is
a change that they need to respond to.  Supporting out-of-tree code is not
something that kernel developers need to be worried about, but we also do
not have to make life harder for out-of-tree developers than it needs to
be.
호환성이 떨어지는 API를 수정할때는 되도록, 업데이트되지 않은 코드가 컴파일러에
의해서 발견되지 않는지 확실히 하는 것이 좋다.  이것은 이 API가 모든 in-tree에서
사용되고 있는지 찾는 데 도움이 될 것이다.  그리고 out-of-tree코드 개발자에게도
대응이 필요한지도 알려줄 것이다.  out-of-tree코드 까지 호환되도록 신경 쓸
필요는 없지만, 굳이 out-of-tree개발자를 힘들게 할 필요는 없지 않은가?
