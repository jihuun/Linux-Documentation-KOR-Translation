        Linux kernel release 3.x <http://kernel.org/>

These are the release notes for Linux version 3.  Read them carefully,
as they tell you what this is all about, explain how to install the
kernel, and what to do if something goes wrong.

이 문서는 Linux version 3.에 관한 문서이다. 문서에는 Kernel의 설치 방법과
무언가 잘못 되었을 때 조치 방법이 설명되어 있다.

WHAT IS LINUX?
리눅스란 무엇인가?

  Linux is a clone of the operating system Unix, written from scratch by
  Linus Torvalds with assistance from a loosely-knit team of hackers across
  the Net. It aims towards POSIX and Single UNIX Specification compliance.

  리눅스는 Unix운영체제 에서 파생되었다. 인터넷 상의 loosely-knit 해커팀의
  도움과 함께 Linus Tovalds가 만들었다. 리눅스는 POSIX표준과 단일 유닉스
  규격(Single UNIX Specification)을 따른다.

  It has all the features you would expect in a modern fully-fledged Unix,
  including true multitasking, virtual memory, shared libraries, demand
  loading, shared copy-on-write executables, proper memory management,
  and multistack networking including IPv4 and IPv6.

  리눅스는 현대의 완전한 UNIX운영체제에서 볼 수 있는 다음의 특징들을
  모두 포함하고 있다. 완벽한 멀티태스킹(multitasking), 가상 메모리(virtual
  memory), 공유 라이브러리(shared libraries), 실시간 페이지 적재기능
  (demand loading executables), shared copy-on-write executables,
  적절한 메모리 관리(memory management), IPv4와 IPv6를 포함한 멀티스택
  네트워킹(multistack networking)


  It is distributed under the GNU General Public License - see the
  accompanying COPYING file for more details.

  리눅스는 GPL 라이센스(GNU General Public License) 하에 배포된다.
  - COPYING파일 참고.


ON WHAT HARDWARE DOES IT RUN?
리눅스는 어떤 하드웨어에서 동작하는가?

  Although originally developed first for 32-bit x86-based PCs (386 or higher),
  today Linux also runs on (at least) the Compaq Alpha AXP, Sun SPARC and
  UltraSPARC, Motorola 68000, PowerPC, PowerPC64, ARM, Hitachi SuperH, Cell,
  IBM S/390, MIPS, HP PA-RISC, Intel IA-64, DEC VAX, AMD x86-64, AXIS CRIS,
  Xtensa, Tilera TILE, AVR32 and Renesas M32R architectures.

  비록 리눅스는 처음에 32bit x86 PC기반으로 개발되었지만, 이제는 다음의 아키텍쳐
  에서도 동작한다. the Compaq Alpha AXP, Sun SPARC, UltraSPARC, Motorola 68000,
  PowerPC, PowerPC64, ARM, Hitachi SuperH, Cell, IBM S/390, MIPS, HP PA-RISC,
  Intel IA-64, DEC VAX, AMD x86-64, AXIS CRIS, Xtensa, Tilera TILE, AVR32,
  Renesas M32R.

  Linux is easily portable to most general-purpose 32- or 64-bit architectures
  as long as they have a paged memory management unit (PMMU) and a port of the
  GNU C compiler (gcc) (part of The GNU Compiler Collection, GCC). Linux has
  also been ported to a number of architectures without a PMMU, although
  functionality is then obviously somewhat limited.
  Linux has also been ported to itself. You can now run the kernel as a
  userspace application - this is called UserMode Linux (UML).

  타겟이 다음을 지원하는 한 리눅스는 32,64bit 아키텍쳐에서 모두 쉽게 포팅이
  가능하다. PMMU(paged memory management unit), GCC(GNU C compiler). 리눅스는
  또한 PMMU가 없는 수많은 아키텍쳐에도 포팅이 가능하다. (다만 기능,성능의
  제약이 있음). 리눅스는 또한 그 자체로도 포팅이 될 수 있다. 리눅스 커널을
  응용프로그램 처럼 실행 시키는것도 가능하다. (이것을 UserMode Linux (UML)
  라고 부른다)


DOCUMENTATION:
/documentation 문서:

 - There is a lot of documentation available both in electronic form on
   the Internet and in books, both Linux-specific and pertaining to
   general UNIX questions.  I'd recommend looking into the documentation
   subdirectories on any Linux FTP site for the LDP (Linux Documentation
   Project) books.  This README is not meant to be documentation on the
   system: there are much better sources available.

 - 리눅스에 특화되어있거나 일반적인 UNIX에 관련된 수 많은 문서들이 인터넷과
   책의 형태로 존재 한다. 리눅스 FTP 사이트나 LDP(Linux Documentation
   project) book에 있는 Documentation 디렉터리 내부의 내용을  살펴보기를
   추천한다.

 - There are various README files in the Documentation/ subdirectory:
   these typically contain kernel-specific installation notes for some
   drivers for example. See Documentation/00-INDEX for a list of what
   is contained in each file.  Please read the Changes file, as it
   contains information about the problems, which may result by upgrading
   your kernel.

 - Documentation/ 하위 디렉터리에는 다양한정 driver를 위한 커널 설치에 관련된
   메모등이 포함 되어있다. Documentation/00-INDEX 파일을 참고하면 각각의 파일에
   어떤 내용이 포함되어 있는지 에 대한 리스트가 있다. Changes 파일에는 커널
   업그레이드가 필요할 수 있는 문제에 대한 정보가 포함 되어 있다.

 - The Documentation/DocBook/ subdirectory contains several guides for
   kernel developers and users.  These guides can be rendered in a
   number of formats:  PostScript (.ps), PDF, HTML, & man-pages, among others.
   After installation, "make psdocs", "make pdfdocs", "make htmldocs",
   or "make mandocs" will render the documentation in the requested format.

 - Documentation/DocBook/ 의 하위 디렉터리에는 커널 개발자와 사용자를 위한
   여러가지의 설명서가 있다. 이런 설명서는 다음의 포맷으로 제공될 수 있다.
   PostScript (.ps), PDF, HTML, & man-pages. 설치 후에는 "make psdocs",
   "make pdfdocs", "make htmldocs", "make mandocs"의 명령으로 원하는 문서
   포맷으로 변환 시킬 수 있다.


INSTALLING the kernel source:
커널 소스 설치 하기:

 - If you install the full sources, put the kernel tarball in a
   directory where you have permissions (eg. your home directory) and
   unpack it:

     gzip -cd linux-3.X.tar.gz | tar xvf -

   or

     bzip2 -dc linux-3.X.tar.bz2 | tar xvf -

   Replace "X" with the version number of the latest kernel.

   Do NOT use the /usr/src/linux area! This area has a (usually
   incomplete) set of kernel headers that are used by the library header
   files.  They should match the library, and not get messed up by
   whatever the kernel-du-jour happens to be.

 - 전체 소스를 설치하려면 커널 압축 파일을 권한이 있는 디렉터리에(ex home
   디렉터리) 포함 시키고 압축을 푼다:

     gzip -cd linux-3.X.tar.gz | tar xvf -

   또는

     bzip2 -dc linux-3.X.tar.bz2 | tar xvf -

   "X" 는 최신 커널 버전으로 변경

   /usr/src/linux 영역은 사용하지 말것. 이 영역은 라이브러리 헤더파일이
   존재하는 커널 헤더로 구성 되어 있다. 이 영역은 라이브러리와 일치 해야
   하며, 무엇이든간에 변경되면 안된다.

 - You can also upgrade between 3.x releases by patching.  Patches are
   distributed in the traditional gzip and the newer bzip2 format.  To
   install by patching, get all the newer patch files, enter the
   top level directory of the kernel source (linux-3.X) and execute:
   또한 패치를 이용해서 3.x 버전으로 업그레이드가 가능하다. 패치는 기존의 gzip
   과 새로운 포맷인 bzip2의 형태로 배포된다. 패치를 이용해 설치하기 위해서는
   모든 새로운 패치파일을 얻고 커널 소스의 최상위 디렉터리로 이동한뒤
   다음의 명령어를 실행 한다:

     gzip -cd ../patch-3.x.gz | patch -p1

   또는

     bzip2 -dc ../patch-3.x.bz2 | patch -p1

   Replace "x" for all versions bigger than the version "X" of your current
   source tree, _in_order_, and you should be ok.  You may want to remove
   the backup files (some-file-name~ or some-file-name.orig), and make sure
   that there are no failed patches (some-file-name# or some-file-name.rej).
   If there are, either you or I have made a mistake.
   "x" 는 현재 커널 소스 트리의 버전보다 높은 버전으로 변경. (some-file-name~
   또는 some-file-name.orig) 형태의 백업파일을 지우고 싶어할 수도 있다. 그리고
   어떠한 결함이 있는 패치(some-file-name# or some-file-name.rej)가 있어서는
   안된다. 만약 그러한 패치가 존재한다면 문제가 생길것 이다.

   Unlike patches for the 3.x kernels, patches for the 3.x.y kernels
   (also known as the -stable kernels) are not incremental but instead apply
   directly to the base 3.x kernel.  For example, if your base kernel is 3.0
   and you want to apply the 3.0.3 patch, you must not first apply the 3.0.1
   and 3.0.2 patches. Similarly, if you are running kernel version 3.0.2 and
   want to jump to 3.0.3, you must first reverse the 3.0.2 patch (that is,
   patch -R) _before_ applying the 3.0.3 patch. You can read more on this in
   Documentation/applying-patches.txt
   3.x 커널 패치와는 다르게, stable 커널 버전인 3.x.y 커널 패치는 incremental
   하지 않고, 대신에 3.x 커널 베이스로 직접 적용해야 한다. 예를 들면, 만약
   당신의 베이스 커널 버전이 3.0 인데 3.0.3 버전 패치를 적용하고자 한다면,
   처음에 3.0.1 과 3.0.2버전 부터 패치를 적용하면 안된다. 비슷하게, 현재 구동
   되는 커널 버전이 3.0.2 버전이고 3.0.3버전으로 업그레이드 하고 싶다면,
   첫번째로 3.0.2버전 패치를 되돌리고(patch -R) 3.0.3 버전 패치를 적용 하면
   된다. 보다 자세한 내용은 Documentation/applying-patches.txt 참고.

   Alternatively, the script patch-kernel can be used to automate this
   process.  It determines the current kernel version and applies any
   patches found.
   대안으로, 다음의 patch-kernel 스크립트를 사용하면 위의 과정을 자동으로
   진행할 수 있다. 이 스크립트는 현재의 커널 버전을 결정하고 어떠한 패치도
   적용 가능하다.

     linux/scripts/patch-kernel linux

   The first argument in the command above is the location of the
   kernel source.  Patches are applied from the current directory, but
   an alternative directory can be specified as the second argument.
   명령어의 첫번째 인자는 커널소스의 경로이다. 패치는 현재 디렉터리에서 부터
   적용될 것이다. 다른 디렉터리는 두번째 인자로 지정될 수 있다.

 - Make sure you have no stale .o files and dependencies lying around:

     cd linux
     make mrproper

   You should now have the sources correctly installed.

SOFTWARE REQUIREMENTS
소프트웨어 요구사항

   Compiling and running the 3.x kernels requires up-to-date
   versions of various software packages.  Consult
   Documentation/Changes for the minimum version numbers required
   and how to get updates for these packages.  Beware that using
   excessively old versions of these packages can cause indirect
   errors that are very difficult to track down, so don't assume that
   you can just update packages when obvious problems arise during
   build or operation.
   3.x 커널을 컴파일 하거나 실행 시키기 위해서는 최신 버전의 여러 소프트웨어
   패키지가 필요하다.  Documentation/Changes 파일을 참고하면 최소한의 버전과
   패키지 업데이트 방법을 확인 할 수 있다. 지나치게 오래된 패키지의 버전은
   추적하기 어려운 간접적인 에러의 원인이 될 수 있다. 따라서 따라서 빌드나
   작업시 명백한 문제점이 등장했을 때 업데이트 하면 될 것 이라고 생각하면
   안된다.

BUILD directory for the kernel:
커널 빌드 디렉터리:

   When compiling the kernel, all output files will per default be
   stored together with the kernel source code.
   Using the option "make O=output/dir" allow you to specify an alternate
   place for the output files (including .config).
   Example:

     kernel source code: /usr/src/linux-3.X
     build directory:    /home/name/build/kernel

   커널을 컴파일 할때, 모든 아웃풋 파일들은 기본적으로 커널 소스코드와 함께
   저장이 될 것이다. "make O=output/dir" 옵션을 이용하면 아래와 같이  아웃풋
   파일(.config 포함)을 다른 경로로 위치 시키는것이 가능하다.

     커널 소스 코드:	/usr/src/linux-3.X
     빌드 디렉터리:	/home/name/build/kernel

   To configure and build the kernel, use:
   커널 빌드를 설정 하기 위해 다음을 이용하면 된다.

     cd /usr/src/linux-3.X
     make O=/home/name/build/kernel menuconfig
     make O=/home/name/build/kernel
     sudo make O=/home/name/build/kernel modules_install install

   Please note: If the 'O=output/dir' option is used, then it must be
   used for all invocations of make.
   다음 사항을 주의 하라: 만약 'O=output/dir' 옵션이 사용되면 make 
   호출에 사용된다.

CONFIGURING the kernel:
커널 설정:

   Do not skip this step even if you are only upgrading one minor
   version.  New configuration options are added in each release, and
   odd problems will turn up if the configuration files are not set up
   as expected.  If you want to carry your existing configuration to a
   new version with minimal work, use "make oldconfig", which will
   only ask you for the answers to new questions.

   이번 단계를 절대 빠트리면 안된다. 단순한 업그레이드를 할지라도 새로운
   configuration 옵션이 각 릴리즈에 추가되어있는데 만약 configuration 파일이
   설정 되어 있지않다면 문제가 발생할것이다. 만약 작업내용이 많지 않아서 현재
   가지고 있는 configuration 파일을 유지하고 싶다면, "make oldconfig" 옵션을
   사용하라. 새로운 질문에 대한 답변만 요구할것이다.

 - Alternative configuration commands are:
 - 또 다른 configuration 명령어들:

     "make config"      Plain text interface.
			평범한 텍스트 인터페이스.

     "make menuconfig"  Text based color menus, radiolists & dialogs.
			텍스트 기반의 컬러 메뉴, radiolists 와 다이얼로그.

     "make nconfig"     Enhanced text based color menus.
			향상된 텍스트 기반의 컬러 메뉴.

     "make xconfig"     X windows (Qt) based configuration tool.
			X윈도우(QT) 기반의 구성 도구

     "make gconfig"     X windows (Gtk) based configuration tool.
			X윈도우(GTK) 기반의 구성 도구

     "make oldconfig"   Default all questions based on the contents of
                        your existing ./.config file and asking about
                        new config symbols.
			현재 가지고있는 .config 파일을 유지하며 사용, 새로운
			설정 대상에 대해서 질문함.

     "make silentoldconfig"
                        Like above, but avoids cluttering the screen
                        with questions already answered.
                        Additionally updates the dependencies.
			위와 유사함. 그러나 이미 답변한 질문들과 함께 어지렵혀진
			화면을 피함. 그리고 의존성들을 갱신함.

     "make olddefconfig"
                        Like above, but sets new symbols to their default
                        values without prompting.
			위와 유사함. prompting 없이 새로운 symbol들을 디폴트 값
			으로 설정함.

     "make defconfig"   Create a ./.config file by using the default
                        symbol values from either arch/$ARCH/defconfig
                        or arch/$ARCH/configs/${PLATFORM}_defconfig,
                        depending on the architecture.

			아키텍쳐 종속적인 파일인 arch/$ARCH/defconfig 이나 
			arch/$ARCH/configs/${PLATFORM}_defconfig 파일로 부터
			디폴트 값을 이용하여 ./.config 파일을 생성.

     "make ${PLATFORM}_defconfig"
                        Create a ./.config file by using the default
                        symbol values from
                        arch/$ARCH/configs/${PLATFORM}_defconfig.
                        Use "make help" to get a list of all available
                        platforms of your architecture.

			arch/$ARCH/configs/${PLATFORM}_defconfig 파일로 부터 
			디폴트 값을 이용하여 ./.config 파일을 생성.

     "make allyesconfig"
                        Create a ./.config file by setting symbol
                        values to 'y' as much as possible.
			가능한한 'y'값으로 ./.config 파일을 생성.

     "make allmodconfig"
                        Create a ./.config file by setting symbol
                        values to 'm' as much as possible.
			가능한한 'm'값으로 ./.config 파일을 생성.

     "make allnoconfig" Create a ./.config file by setting symbol
                        values to 'n' as much as possible.
			가능한한 'n'값으로 ./.config 파일을 생성.

     "make randconfig"  Create a ./.config file by setting symbol
                        values to random values.
			무작위 값으로 ./.config 파일을 생성.

     "make localmodconfig" Create a config based on current config and
                           loaded modules (lsmod). Disables any module
                           option that is not needed for the loaded modules.

                           To create a localmodconfig for another machine,
                           store the lsmod of that machine into a file
                           and pass it in as a LSMOD parameter.

			   lsmod를 통해 loaded 된 모듈과 현재 config 파일을
			   기반으로 생성. 다른 종류의 기기를 위한
			   localmodconfig를 생성하기 위해서기기의 lsmod를 저장.
			   그리고 LSMOD 파라미터로 떠 넘긴다.

                   target$ lsmod > /tmp/mylsmod
                   target$ scp /tmp/mylsmod host:/tmp

                   host$ make LSMOD=/tmp/mylsmod localmodconfig

                           The above also works when cross compiling.
			   또한 위의 내용은 크로스 컴파일 할때 동작한다.

     "make localyesconfig" Similar to localmodconfig, except it will convert
                           all module options to built in (=y) options.
			   모든 모듈 옵션이 (=y)로 변경되는 것 말고는
			   localmodconfig 와 비슷함. 
				
   You can find more information on using the Linux kernel config tools
   in Documentation/kbuild/kconfig.txt.
   리눅스 커널의 config tool에 대한 보다 자세한 정보는
   Documentation/kbuild/kconfig.txt 를 참고하라.


 - NOTES on "make config":
 - "make config"에 대한 설명:

    - Having unnecessary drivers will make the kernel bigger, and can
      under some circumstances lead to problems: probing for a
      nonexistent controller card may confuse your other controllers
    - 불필요한 드라이버들은 커널을 더 비대하게 만들고 다음의 문제를 야기
      시킬 수 있다. 존재하지 않는 컨트롤러 카드를 탐색하는것은 다른
      컨트롤러와 혼동할 가능성이 있다.

    - Compiling the kernel with "Processor type" set higher than 386
      will result in a kernel that does NOT work on a 386.  The
      kernel will detect this on bootup, and give up.
    - 프로세서 타입을 386보다 높게 설정한 커널을 컴파일 하는 것은 386
      PC 에서 동작이 안되는 결과를 낳을 것이다. 커널은 이것을 부팅 할 때
      발견하고 그만 둘 것이다.

    - A kernel with math-emulation compiled in will still use the
      coprocessor if one is present: the math emulation will just
      never get used in that case.  The kernel will be slightly larger,
      but will work on different machines regardless of whether they
      have a math coprocessor or not.
    - math-emulation으로 컴파일 된 커널은 계속 코프로세서를 사용할 것이다.
      math-emulation은 커널이 조금 커질때는 사용되지 않는다. 그러나 Math
      코프로세서 존재유무에 관계 없이 다른 장치에서는 동작할 것이다.

    - The "kernel hacking" configuration details usually result in a
      bigger or slower kernel (or both), and can even make the kernel
      less stable by configuring some routines to actively try to
      break bad code to find kernel problems (kmalloc()).  Thus you
      should probably answer 'n' to the questions for "development",
      "experimental", or "debugging" features.
      자세한 configuration 설정의 결과는 더 비대하고 느려진 (또는 둘다)
      커널이다. 그리고 커널의 문제점을 찾기 위해서 문제있는 코드들을 바로
      잡는 등의 특정 루틴을 설정 하는 것은 커널을 더 불안정하게 만들 수
      있다. 따라서 "development", "experimental", "debugging" feature를
      위한 질문에는 'n'으로 답변 하는것이 좋다.

COMPILING the kernel:
커널 컴파일 하기:

 - Make sure you have at least gcc 3.2 available.
   For more information, refer to Documentation/Changes.

   Please note that you can still run a.out user programs with this kernel.
 - gcc 버전이 최소 3.2 이상인지 확인하라. 
   자세한 내용은 Documentation/Changes 참고.

   a.out의 응용 프로그램이 커널에서 동작하는지 확인 하라.

 - Do a "make" to create a compressed kernel image. It is also
   possible to do "make install" if you have lilo installed to suit the
   kernel makefiles, but you may want to check your particular lilo setup first.

   To do the actual install, you have to be root, but none of the normal
   build should require that. Don't take the name of root in vain.
 - 압축된 커널 이미지를 만들기 위하여 "make"를 실행하라. 만약 커널 makefile에
   적합하게 설치된 lilo가 있다면 "make install" 명령어도 사용이 가능하다. 그러나
   먼저 특정한 lilo 설정을 확인 하기를 원할 것이다.
   
   실제 설치를 하기 위해서는 root권한으로 해야한다. 그러나 정상적인 빌드라면 
   이런 부분이 필요하지는 않는다. 헛되히 root의 이름을 사용하지 말아라.
   
   LILO : (LInux LOader, 리눅스 로더) 리눅스를 위한 부트 로더

 - If you configured any of the parts of the kernel as `modules', you
   will also have to do "make modules_install".
 - 만약 커널의 어떠한 부분을 모듈로 구성했다면, "make module_install"을 사용
   해야 할 것이다.

 - Verbose kernel compile/build output:

   Normally, the kernel build system runs in a fairly quiet mode (but not
   totally silent).  However, sometimes you or other kernel developers need
   to see compile, link, or other commands exactly as they are executed.
   For this, use "verbose" build mode.  This is done by inserting
   "V=1" in the "make" command.  E.g.:

     make V=1 all

   To have the build system also tell the reason for the rebuild of each
   target, use "V=2".  The default is "V=0".
 - 장황한 커널 컴파일/빌드 산출물:

   보통 커널의 빌드 시스템은 꽤 조용하게 구동 된다. (완전 조용한 것은 아님)
   그러나 때때로 당신 이나 다른 커널 개발자들은 컴파일,링크,혹은 다른 명령들이
   정확히 어떻게 실행 되고 있는지  확인 하고 싶어한다. 이것을 위해서 "verbose"
   빌드 모드를 사용해라. "make" 명령에서 "V=1"를 삽입하면 된다. 예를 들면,

     make V=1 all

   이 빌드 시스템을 갖는것은 "V=2"를 사용함으로서 각각의 타겟을 다시 빌드함
   으로서의 요인도 된다. 기본값은 "V=0" 이다.

 - Keep a backup kernel handy in case something goes wrong.  This is
   especially true for the development releases, since each new release
   contains new code which has not been debugged.  Make sure you keep a
   backup of the modules corresponding to that kernel, as well.  If you
   are installing a new kernel with the same version number as your
   working kernel, make a backup of your modules directory before you
   do a "make modules_install".
   문제 상황에 대비해서 커널을 백업 해라. 이것은 특별히 개발 출시에 있어서 필요
   하다. 디버깅이 되지 않은 코드들이 래 릴리즈 버전에 포함 되어있다. 또한 커널에
   상응하는 모듈도 백업해야 한다. 만약 현재 동작하는 커널과 같은 버전의 커널을
   설치하고자 한다면 "make module_install" 을 하기 전에 모듈 디렉터리를 백업
   해라.

   Alternatively, before compiling, use the kernel config option
   "LOCALVERSION" to append a unique suffix to the regular kernel version.
   LOCALVERSION can be set in the "General Setup" menu.
   컴파일을 진행하기 이전에 "LOCALVERSION" config 옵션을 사용하면, 정규 커널
   버전에 고유의 접미사를 붙일 수 있다. LOCALVERSION 은 "General Setup" 메뉴
   에서 설정할 수 있다.

 - In order to boot your new kernel, you'll need to copy the kernel
   image (e.g. .../linux/arch/i386/boot/bzImage after compilation)
   to the place where your regular bootable kernel is found.
 - 새로운 커널로 부팅을 하기 위해서는 커널 이미지를
   (예를 들면 .../linux/arch/i386/boot/bzImage after compilation) 원래 부팅이
   가능한 커널이 있는 위치에 복사 하는 작업이 필요 하다.

 - Booting a kernel directly from a floppy without the assistance of a
   bootloader such as LILO, is no longer supported.
 - LILO과 같은 부트로더의 도움 없이 플로피 디스크로 직접 커널을 부팅하는 것은
   더이상 지원 되지 않는다.

   If you boot Linux from the hard drive, chances are you use LILO, which
   uses the kernel image as specified in the file /etc/lilo.conf.  The
   kernel image file is usually /vmlinuz, /boot/vmlinuz, /bzImage or
   /boot/bzImage.  To use the new kernel, save a copy of the old image
   and copy the new image over the old one.  Then, you MUST RERUN LILO
   to update the loading map!! If you don't, you won't be able to boot
   the new kernel image.
   하드디스크를 통해 리눅스를 부팅 시킨다면, 아마 당신은 /etc/lilo.conf 파일에
   기술되어 있는대로 커널 이미지를 사용하는 LILO를 사용할 것이다. 커널 이미지
   파일은 보통 다음과 같다. /vmlinuz, /boot/vmlinuz, /bzImage
   /boot/bzImage. 새 커널을 사용하기 위해서, 예전 이미지 복사본과 이전 것과
   관련된 새 이미지 복사본을 저장하라. 그리고 loading map을 갱신 하기 위해서
   LILO를 재시작 해야 한다. 이렇게 하지 않는다면 새 커널 이미지가 부팅
   되지 않을 것이다.    

   Reinstalling LILO is usually a matter of running /sbin/lilo.
   You may wish to edit /etc/lilo.conf to specify an entry for your
   old kernel image (say, /vmlinux.old) in case the new one does not
   work.  See the LILO docs for more information.
   LILO를 재 설치 하는것은 보통 /sbin/lilo의 실행에 관련된 문제이다.
   새 커널이 동작하지 않는 상황에 대비하여 예전 커널 이미지
   (가령, /vmlinux.old) 목록을 기술 하기 위해서 /etc/lilo.conf 파일을 수정해도
   좋다. 보다 자세한 내용은 LILO 문서 참고.

   After reinstalling LILO, you should be all set.  Shutdown the system,
   reboot, and enjoy!
   LILO를 재설치 하면 모든 설정이 끝난다. 시스템을 종료 하고 재 부팅 하면
   된다. 

   If you ever need to change the default root device, video mode,
   ramdisk size, etc.  in the kernel image, use the 'rdev' program (or
   alternatively the LILO boot options when appropriate).  No need to
   recompile the kernel to change these parameters.
   만약 기본 root 기기에서 커널 이미지의 비디오 모드나 ramdisk 크기 등과 같은
   것들을 변경 하는것이 필요 하다면, 'rdev' 프로그램을 사용해라. (또는 그
   대신에 적당한 LILO 부트 옵션도 가능). 이런 파라미터의 변경을 위해서 커널을
   재 컴파일 할 필요는 없다. 

 - Reboot with the new kernel and enjoy.
 - 새로운 커널과 함께 즐거운 시간을 갖기를.

IF SOMETHING GOES WRONG:
뭔가 잘못되면:

 - If you have problems that seem to be due to kernel bugs, please check
   the file MAINTAINERS to see if there is a particular person associated
   with the part of the kernel that you are having trouble with. If there
   isn't anyone listed there, then the second best thing is to mail
   them to me (torvalds@linux-foundation.org), and possibly to any other
   relevant mailing-list or to the newsgroup.
 - 커널 버그로 부터 기인하는 문제가 생겼을때, 커널에서 그 문제의 해당하는 부분과
   연관되어 있는 사람을 찾기 위해서 MAINTAINERS 파일을 찾아보면 된다. 만약 그
   리스트에서 아무도 찾을 수 없었다면, 나에게 (torvalds@linux-foundation.org)
   또는, 관계가 있는 메일링리스트나 뉴스그룹에게 메일을 보내는 것이 두번째 좋은
   방법이 될 것이다.

 - In all bug-reports, *please* tell what kernel you are talking about,
   how to duplicate the problem, and what your setup is (use your common
   sense).  If the problem is new, tell me so, and if the problem is
   old, please try to tell me when you first noticed it.
 - 모든 버그-리포트 에서는 말하려는 대상이 어떤 커널인지 어떻게 문제를 재현
   시키는지 문제 발생시 설정이 어떠했는지 등을 말해야 한다. 만약 새로 발견된
   문제 였다면, 나게에 말해라. 그리고 문제가 예전 문제라면, 언제 공지 되었었는지
   말해 달라.

 - If the bug results in a message like

     unable to handle kernel paging request at address C0000010
     Oops: 0002
     EIP:   0010:XXXXXXXX
     eax: xxxxxxxx   ebx: xxxxxxxx   ecx: xxxxxxxx   edx: xxxxxxxx
     esi: xxxxxxxx   edi: xxxxxxxx   ebp: xxxxxxxx
     ds: xxxx  es: xxxx  fs: xxxx  gs: xxxx
     Pid: xx, process nr: xx
     xx xx xx xx xx xx xx xx xx xx

   or similar kernel debugging information on your screen or in your
   system log, please duplicate it *exactly*.  The dump may look
   incomprehensible to you, but it does contain information that may
   help debugging the problem.  The text above the dump is also
   important: it tells something about why the kernel dumped code (in
   the above example, it's due to a bad kernel pointer). More information
   on making sense of the dump is in Documentation/oops-tracing.txt

 - If you compiled the kernel with CONFIG_KALLSYMS you can send the dump
   as is, otherwise you will have to use the "ksymoops" program to make
   sense of the dump (but compiling with CONFIG_KALLSYMS is usually preferred).
   This utility can be downloaded from
   ftp://ftp.<country>.kernel.org/pub/linux/utils/kernel/ksymoops/ .
   Alternatively, you can do the dump lookup by hand:
 - CONFIG_KALLSYMS로 커널을 컴파일하는 경우에 있는 그대로 덤프를 보낼 수 있다. 
   그렇지 않으면 덤프를 이해하기 쉽게 만들기 위해 "ksymoops" 프로그램을 사용해야한다 
   (그러나 CONFIG_KALLSYMS로 컴파일하는 것이 일반적으로 바람직하다). 
   이 유틸리티는 다음 주소에서 다운로드 할 수 있다 
   ftp://ftp.<country>.kernel.org/pub/linux/utils/kernel/ksymoops/ . 
   다른 방법으로는 손으로 일일이 덤프 조회를 수행 할 수 있다.
 

 - In debugging dumps like the above, it helps enormously if you can
   look up what the EIP value means.  The hex value as such doesn't help
   me or anybody else very much: it will depend on your particular
   kernel setup.  What you should do is take the hex value from the EIP
   line (ignore the "0010:"), and look it up in the kernel namelist to
   see which kernel function contains the offending address.
 - 위와 같은디버깅 덤프는 당신이 EIP 값이 무엇을 의미하는지 찾아 볼 수 있다면 엄청난 도움이 된다. 
   하지만 그 16 진수 값은 큰 도움이되지 않는다: 특정 커널 설정에 따라 달라질 수 있다. 
   당신이해야 할 것은 EIP 행에서 16 진수 값("0010:"은 무시)을 얻고 
   잘못된 주소를 포함하는 커널 함수를 찾기위해 그 값을 kernel namelist에서 찾아보라.

   To find out the kernel function name, you'll need to find the system
   binary associated with the kernel that exhibited the symptom.  This is
   the file 'linux/vmlinux'.  To extract the namelist and match it against
   the EIP from the kernel crash, do:
   
     nm vmlinux | sort | less
   커널 함수 이름을 확인하려면, 그 잘못된 증상을 나타내는 커널과 관련된
   시스템 바이너리를 찾을 필요가있다. 이것이 'linux/vmlinux' 파일이다.
   name list를 추출하고 커널 충돌시 EIP와 대조해 보기 위해 다음 명령어를 실행하라.
   
     nm vmlinux | sort | less

   This will give you a list of kernel addresses sorted in ascending
   order, from which it is simple to find the function that contains the
   offending address.  Note that the address given by the kernel
   debugging messages will not necessarily match exactly with the
   function addresses (in fact, that is very unlikely), so you can't
   just 'grep' the list: the list will, however, give you the starting
   point of each kernel function, so by looking for the function that
   has a starting address lower than the one you are searching for but
   is followed by a function with a higher address you will find the one
   you want.  In fact, it may be a good idea to include a bit of
   "context" in your problem report, giving a few lines around the
   interesting one.
   이렇게 하면오름차순으로 정렬된 커널 주소의 목록을 제공하여
   잘못된 주소를 포함하는 함수를 찾기가 쉬워진다. 
   커널 디버깅 메시지에 의해 주어진 주소가 함수 주소와 정확히
   일치하기 어렵기 때문에 grep 명령어를 이용해야 할수도 있다.
   (목록에 주어진 각 커널 함수의 시작점은 당신이 찾는 함수보다
   낮은 주소를 가지지만 바로 뒤에 당신이 찾는 높은 주소의 함수가
   주어지므로 쉽게 찾을 것이다.) problem report를 작성할때 
   약간의 앞뒤 문맥을 포함하는 것도 좋은 생각이다.

   If you for some reason cannot do the above (you have a pre-compiled
   kernel image or similar), telling me as much about your setup as
   possible will help.  Please read the REPORTING-BUGS document for details.
   만약 위 설명을 따라할수 없는 상황이라면 (미리 컴파일 된 커널 이미지 등)
   저자에게 당신의 설정이나 환경에 대해 가능한 한 많이 이야기 해주는 것이 도움이 된다.
   관련된 자세한 내용은 REPORTING-BUGS 문서를 읽어 보기 바람.

 - Alternatively, you can use gdb on a running kernel. (read-only; i.e. you
   cannot change values or set break points.) To do this, first compile the
   kernel with -g; edit arch/i386/Makefile appropriately, then do a "make
   clean". You'll also need to enable CONFIG_PROC_FS (via "make config").
   또는, 실행중인 커널에 GDB를 사용할 수 있다. (읽기 전용, 즉 당신은 
   값이나 브레이크 포인트를 변경할 수 없다) 이 작업을 수행하려면, 
   먼저 arch/i386/Makefile을 수정하여 -g 옵션으로 커널을 컴파일 한뒤,
   "make clean" 을 수행한다. 이 과정에서 ("make config" 이용) 
   CONFIG_PROC_FS도 enable 해야함.

   After you've rebooted with the new kernel, do "gdb vmlinux /proc/kcore".
   You can now use all the usual gdb commands. The command to look up the
   point where your system crashed is "l *0xXXXXXXXX". (Replace the XXXes
   with the EIP value.)
   새 커널로 부팅 한 후, "gdb vmlinux /proc/kcore" 명령을 수행하면 
   모든 GDB 명령을 사용할 수 있게 된다. 시스템이 크래시된 포인트를 찾으려면
   "l *0xXXXXXXXX"(XXX는 EIP의 값) 명령을 수행하면 됨.

   gdb'ing a non-running kernel currently fails because gdb (wrongly)
   disregards the starting offset for which the kernel is compiled.
   현재 실행중이지 않은 커널을 gdb로 디버깅 하는 것은 실패한다. 왜냐하면
   gdb가 커널이 컴파일되는 시작 오프셋을무시하기 때문이다.

