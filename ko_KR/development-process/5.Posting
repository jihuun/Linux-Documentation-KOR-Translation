5: 패치 올리기

조만간, 당신의 수정사항이 준비가 완료되어 리뷰를 받게될 시점이 올것이고 결국
메인라인 커널에 반영될 것이다.  당연하게도, 커널 커뮤니티는 패치를 올리기 위한
규칙과 절차를 발전 시켜왔다.  (그것을 지키면 모두가 편해짐) 이 문서는 이 과정에
대해 자세히 다룰 것이다. 자세한 내용은 Documentation 디렉토리의
SubmittingPatches, SubmittingDrivers, SubmitChecklist 파일들에서도 찾아 볼 수
있다.


5.1: 언제 패치를 올리나

작업이 완벽히 준비되기 전에는 패치를 커뮤니티에 올리고 싶지는 않을 것이다.
간단한 패치의 경우, 이것은 별 문제가 되지 않는다.  하지만 작업이 복잡해지면
작업이 완료되기 전에 커뮤니티로부터 피드백을 통해 얻을 수 있는 것이 많다.
그래서 당신은 작업을 진행중인 상태에서 패치를 포스팅하거나 관심을 갖는
개발자들이 언제든지 따라잡을 수 있도록 git 트리 사용을 고려하는 것이 좋다.

만약 패치가 메인라인에 반영되기에는 아직 부족한상태로 커뮤니티에 포스팅 할
경우, 포스팅 글 자체에 그렇게 표기해 주는 것이 좋다.  또한 앞으로 수행 해야할
작업 및 알려진 문제를 언급하는게 좋다.  많지 않은 사람들이 이 불완전한 패치를
보겠지만, 그 사람들이 당신이 올바른 방향으로 작업을 하는데 도움을 줄 수 있을
것이다.


5.2: 패치를 보내기 전에 고려해야할 사항

당신이 개발 커뮤니티에 패치를 보내는 것을 고려하기 전에 해야하는 다음과 같은
일들이 있다

 - 당신이 할 수있는 범위에서 코드를 테스트 해라.  커널 디버깅 도구를 활용해
   커널이 구성 옵션의 합리적인 조합으로 빌드 될 것을 보장하고 크로스 컴파일러를
   이용해 다른 아키텍쳐용으로도 빌드가 되는지 확인하라.

 - 코드가 커널 코딩 스타일 가이드 라인을 준수하는지 확인하라.

 - 당신의 변경사항이 성능에 영향이 있다면, 당신은 당신의 변경사항의 영향(또는
   효과)이 무엇인지 보여주는 벤치 마크를 실행해야 한다.  결과는 요약하여 패치에
   포함 되어야한다.

 - 당신이 코드를 게시 할 수있는 권한이 있는지 확인하라.  어떤 작업이 회사에
   의해 수행 된 경우, 그 회사가 이 작업에 대한 권리를 가지고 있으며, GPL
   라이센스로 릴리즈 되는데 동의해야 한다.

일반적으로, 패치를 올리기 이전에 위의 사항을 지켰는지 돌이켜보는 시간을
갖는것은 나중에 좋은 결과로 돌아오게 될 것이다.


5.3: 패치 준비하기

패치 포스팅을 위한 준비는 놀라운 만큼 많은양의 작업이 될수 있다.  그러나 다시
말하지만 패치를 준비할때 시간을 절약하려고 하는것은 좋은 생각이 아니다.  아무리
시간이 촉박해도 말이다.

패치는 반드시 특정 버전의 커널을 기준으로 준비를 해야한다.  일반적으로 패치는
현재 메인라인을 기반으로 하는것이 좋다.  메인라인을 기반으로 할 때, 임의의
지점에서 분기하기 보다는 stable 이나 rc 같은 잘 알려진 릴리스 포인트로 시작하는
것이 좋다.

하지만 폭넓은 테스트 및 리뷰를 용이하게 하기위해 -mm, linux-next, 또는
서브시스템 트리에 대한 버전이 필요할 수도 있다.  패치의 분야나 다른곳에서
무슨일이 일어나고 있는지에 따라서 이런 다른버전을 기반으로 만드는것은 충돌을
해결하거나, API 변경을 다루는데에 상당한 양의 작업이 필요할수 있다.

가장 간단한 하나의 변경만이 하나의 패치로 제작 되어야 한다.  모든 수정사항은
그런 단순한 개별 패치의 논리적인 묶음으로 만들어져야 한다.  패치를 분할
하는것은 약간의 기술을 필요로 한다.  일부 개발자는 커뮤니티가 원하는 방법대로
패치를 분할 하는방법을 찾는데에 많은 시간을 보내기도 한다.  그래서 경험으로
얻은 상당히 도움이 될만한 규칙들을 소개한다.

 - 당신의 포스팅할 패치 묶음은 확실하게 당신이 작업하는 ##로컬 버전의 패치
   묶음의 형태와는 다르게 제작해야 한다.  대신, 커뮤니티에서 원하는 형식의
   패치로 만드는것을 고려해야 한다.  그리고 개별 패치로 나눌 때에는 ##타당한
   방법으로 나누어져야 한다.  개발자들은 당신이 그 변경을 만든 과정이 아니라
   분리되면서 필요내용을 모두 포함하는가에 관심이 있다.

   논리적으로 독립적인 각 변경은 별도의 패치로 제작해야한다.  이러한 변경들은
   구조체 필드 추가같이 작을수도 중요한 새 드라이버 추가같이 클수도 있지만
   개념적으로 작고 이해하기 쉽게 한줄로 설명되야 한다.  각 패치는 자체적으로
   검토될 수 있어야하고 설명과 코드가 일치하는지 검증가능 해야 한다.

 - 위 가이드라인을 다시 정리하면, 다른 타입의 변경을 하나의 패치에 혼합하면
   안된다.  단일 패치로 중요한 보안 버그를 수정하고, 구조체를 재배열하고,
   코드를 다듬었다면 이 패치는 무시당할 것이고 이 중요한 ##수정사항을 잃게 될
   것이다.

 - 각 패치는 정상적으로 빌드되고 실행되는 커널을 산출해야한다.  패치 묶음
   병합이 도중에 중단된 경우에도, 그 결과는 여전히 동작하는 커널 이어야한다.
   패치 묵음의 부분 적용은 "git bisect"툴이 Regression을 찾기위해 사용될때 흔히
   이용되는 방법이다.  결과가 동작하지 않는 커널인 경우, 당신은 문제점을
   추적하는 숭고한 작업에 종사하는 개발자와 사용자의 삶을 어렵게 만들 것이다.

 - 하지만 이것을 지나치게 해서도 안된다. 한번은 한 개발자가 한 파일을
   수정하는데 500여개의 패치 세트를 올렸고 이 행위는 그를 커널 메일링
   리스트에서 인기없는 사람으로 만들었다.  하나의 패치는 그것이 여전히 하나의
   논리적 변화를 포함한다면 합리적으로 큰 패치가 될 수있다.

 - 연속된 일련의 패치(패치 묶음)로 완전히 새로운 구조를 추가할때, 그 패치들의
   마지막 패치가 반영되기 전까지 그 구조를 사용 하지 못하도록 막고 싶을 수
   있다.  이런것은 가능하면 피해야 한다.  그 패치 묶음이 Regression을
   만들었다면 bisect 툴은 진짜 문제가 어느 패치에 있건 마지막 패치를 원인으로
   지목할 것이기 때문이다.  가급적이면 새로운 코드가 추가되는 패치는 바로 그
   코드를 활성화 해야한다.

완벽한 패치 시리즈를 만드는 작업은 시간과 생각이 많이 필요한 힘든 과정이다.
하지만 제대로 완료 된다면 그 시간들은 그만한 가치가 있다.


5.4: 패치 형식 갖추기 그리고 Changelog

이제 당신은 포스팅을 위해 일련의 완벽한 패치들을 만들었지만, 아직 끝난것은
아니다.  각 패치는 신속하고 명확하게 목적을 전달할 수 있는 메시지 형식으로
만들어 져야 한다.  이를 위해, 각 패치는 다음과 같이 구성된다:

 - "From" 행에 패치 저자 이름을 넣는 것은 선택사항이다.  당신이 이메일을 통해
   다른 사람의 패치를 전달한 경우 이 행은 필수지만, 확신이 없는 경우 추가해도
   아무 문제가 없다.

 - 패치가 하는 일의 한 줄 설명.  이 메시지는 어떤 범위의 패치인지 읽는사람이
   추가의 설명이 필요없이 완벽하게 이해할 수 있도록 충분 해야한다.  이것은
   "short form" Changelog에 표시될 행이기 때문이다.  예를 들면, 아래와 같이
   관련있는 서브시스템의 이름이 처음에 오고 패치의 목적이 뒤에 붙는다.

	gpio: fix build on CONFIG_GPIO_SYSFS=n

   한줄의 빈 행 다음에 패치 내용에 대한 상세한 설명.  이 설명은 필요한 만큼
   길어질 수 있다.  이 패치가 하는 일과 이 패치가 왜 커널에 적용되야 하는지
   설명해야 하기 때문이다.

   최소 한줄의 "Signed-off-by" 를 포함하는 한줄 이상의 태그 행: 패치의 저자 행.
   태그는 아래에서 보다 상세히 설명 될 것이다.

위 항목들은 함께 패치에 대한 Changelog를 형성한다. 좋은 Changelog를 작성하는
것은 매우 중요하지만 종종 간과되는 기술 이기도 하다.  이 문제는 다시 논의할
가치가 있다.  Changelog를 작성하는 경우, 당신은 다른 많은 사람이 그것을
읽는다는 것을 명심 해야한다.  이들은 이 패치가 포함되야 하는지 검토해야 하는
서브시스템 메인테이너와 리뷰어, 이 패치가 기존 커널에 백포트 되야 하는지
결정하려는 디스트리뷰터와 다른 메인테이너, 특정 문제에 대한 원인인지 궁금한
버그사냥꾼, 커널이 어떻게 변경되었는지 알고싶은 사용자들이 포함된다.  좋은
Changelog는 가능한 가장 직접적이고 간결한 방법으로 이 모든 사람들에게 필요한
정보를 전달해야 한다.

그러기 위해서, 온라인의 제약을 고려할 때, 요약 행은 가능한 한 수정사항의 효과와
동기부여를 표현 해야한다.  상세한 설명은 다음 해당 주제를 강화하고 필요한 추가
정보를 제공할 수 있다.  패치가 버그를 수정하는 경우, 가능하면 버그를 소개한
커밋을 인용하라(커밋ID와 제목을 제공하라).  문제가 특정로그 또는 컴파일러
출력과 관련있는 경우, 다른 사람들이 해결책을 찾기 쉽도록 포함 시켜라.  한
수정사항이 다음에 올라올 패치의 수정사항을 지원하기 위한 것일 경우, 그 내용도
적어라.  내부 API를 변경하는 경우, 세부 변경사항과 어떻게 다른 개발자가
응답해야 하는지 자세히 기술하라.  일반적으로, 당신이 Changelog를 읽게 될
모든사람들의 입장에서 생각할수록, 더 나은 Changelog(그리고 커널)가 될 것이다.

물론, Changelog는 버전관리시스템에 적용할때 사용되는 텍스트여야한다.  아래
내용을 참고해라.

 - 통합 ("-u") 형식으로 된 패치. diff에 "-p"옵션을 사용하면 변경사항과 관련함수
   이름들이 연결되어 다른 사람들이 읽기 쉬운 결과가 나온다.

당신은 패치에 관련이 없는 파일(예를 들어 빌드프로세스에 의해 생성된 파일이나
편집기 백업 파일)에 대한 변경사항을 포함하지 않도록 주의 해야한다.  문서
디렉토리에 있는 파일 "dontdiff는" 이에 관해 도움이 될 수 있다. diff에 "-X" 옵션
사용.

위에 언급된 태그들은 패치개발에 얼마나 다양한 개발자가 참여했는지 설명하기 위해
사용된다.  이들은 SubmittingPatches문서에 자세히 설명되어 있다.  여기서 기술한
내용은 간단한 개요이다.  이 라인의 각 형식은 다음과 같다:

	tag: Full Name <email address>  optional-other-stuff

공통적으로 쓰이는 태그들은 다음과 같다:

 - Signed-off-by: 이 태그는 개발자가 패치를 커널에 포함하기 위해 제출할 권리가
   있음을 증명한다.  ##이것은 개발자의 생산자 증명서에 관한 합의이며, 관련된
   전체 문서는 Documentation/SubmittingPatches에서 찾을 수 있다.  적절한
   signen-off-by 태그가 없는 코드는 메인라인에 반영될 수 없다.

 - Acked-by: 패치가 커널에 반영 되기에 적합하다는 다른 개발자(주로 관련코드의
   메인테이너)에 의한 동의를 나타낸다.

 - Tested-by: 여기 언급된 사람이 해당패치를 테스트 했고 동작을 확인한 사람이다.

   Reviewed-by: 여기 언급된 개발자는 패치를 검토한 사람이다; 자세한 내용은
   Documentation/SubmittingPatches에 있는 reviewer's statement를 참조하라.

 - Reported-by: 이 패치로 해결될 수 있는 문제점을 리포트한 사용자의 이름이다.
   이 태그는(종종 과소평가되는) 우리의 코드를 테스트하고 패치가 제대로 동작하지
   않는 경우 우리에게 알려주는 사람들을 언급하는데 사용된다.

 - Cc: 언급된 사람은 패치의 사본을 받고 거기에 코멘트할 기회를 가졌다.

당신의 패치에 태그를 추가할때 주의할 점은, 오직 Cc:만이 명시적 허락없이 사람을
추가할수 있다는 것이다.

5.5: 패치 보내기

당신이 당신의 패치를 메일로 보내기 전에, 당신이 처리해야할 몇 가지 사항이 더
있다.

 - 당신은 패치가 메일시스템에 의해 손상되지 않는다고 확신하는가?  불필요한
   공백을 변경하거나 메일 클라이언트에 의해 수행된 줄 바꿈은 종종 다른 쪽에
   적용되지 않고 종종 구체적으로 검토되지 않는다.  의심스럽다면, 자신에게
   패치를 보내 그대로 나타나는지 확인을 해보는 것이 좋다.

   Documentation/email-clients.txt 문서에 특정 메일 클라이언트들을 이용해
   패치를 보낼때 유용한 힌트들이 있다.

 - 당신의 패치에 어리석은 실수가 없는지 확신하는가? 당신은 항상
   scripts/checkpatch.pl 스크립트를 통해 패치를 체크해보고 출력되는 문제들을
   해결 해야한다.  커널 패치가 어때야 하는지 충분히 생각해 보면서,
   checkpatch.pl 스크립트가 당신보다 똑똑하지 않다는것을 명심해야 한다.
   checkpatch.pl 스크립트가 출력하는 문제를 수정하는것이 코드를 나쁘게 할 수
   있다.  그런경우 수정하지 마라.

패치는 항상 일반 텍스트로 전송해야한다.  특히 첨부파일로 보내면 안된다.
리뷰자가 검토답변에 패치의 특정 부분을 인용 하기가 어려워지기 때문이다.  대신,
본문 안에 직접 패치내용을 포함하여 전달하라.

패치를 메일로 보낼때, 그것에 관심을 가질만한 모든사람에게 사본을 보내는 것이
중요하다.  다른 프로젝트 달리, 커널은 많은 사본을 전송하는것을 지나치다
싶을정도로 장려한다.  패치에 관련있는 사람들이 메일링리스트에서 당신의 포스팅을
볼거라고 가정하지 마라.  특히, 사본이 반드시 전달되야 하는 사람들은 아래와
같다.

 - 관련된 서브시스템의 메인테이너. 위에 설명한바와 같이, MAINTAINERS 파일이 이
   사람들을 찾아볼수 있는 첫 번째 위치이다.

 - 같은 부분에서 작업 하고있는 다른 개발자(특히 현재 작업하고 있을수 있는 사람)
   git을 통해 당신이 작업중인 파일을 수정한 다른사람을 확인하는 것이 도움이
   된다.

 - 버그리포트 또는 기능요청에 의해 작업한 경우, 원래 제안자를 명시하라.

 - 관련 메일링리스트에 사본을 보내거나, 특별히 적용된것이 없다면 linux-kernel
   리스트로 보내라.

 - 당신이 버그를 수정하는 경우, 수정사항이 다음 stable 업데이트에 포함 되어야
   하는지 생각해 보아야 한다.  만약 포함되어야 한다고 생각되면
   stable@vger.kernel.org 로 패치의 사본을 보내야 한다.  또한 "Cc:
   stable@vger.kernel.org" 태그를 패치에 추가해야 stable팀에서 당신의 수정이
   메인라인에 병합될때 통지를 받을 수 있다.

패치를 받는 사람을 선택할때, 결국 누가 패치를 받아 머지시킬지 생각해보는게
좋다.  리누스 토발즈에게 직접 패치를 보내 반영시키는 것도 가능하지만, 보통
그런식으로 진행되지 않는다.  리누스는 바쁘고, 커널의 각 특정부분을 지켜보는
서브시스템 메인테이너들이 있다.  일반적으로 그런 메인테이너들이 패치를 반영
해주길 원한다.  명백한 메인테이너가 없다면, Andrew Morton이 최후의 의지할 수
있는 사람이다.


패치는 좋은 제목이 필요하다.  패치라인의 기본형식은 다음과 같다:

	[PATCH nn/mm] subsys: one-line description of the patch

"nn"은 패치의 순서이고, "mm"는 패치의 총 갯수다. "subsys"는 관련된 서브시스템의
이름이다. nn/mm 은 단일패치의 경우 생략할 수 있다.

만약 크기가 큰 패치 묶음을 준비한 경우, 0번째 패치로 간단한 소개를 보내는 것이
관례다.  이 관례는 잘 지켜지지 않지만, 그것을 사용하는 경우, 이것이 커널
Changelog에 포함되지는 않는다.  그래서 패치 자체가 완전한 Changelog 정보를
갖췄는지 확인 해야한다.

일반적으로, 패치 묶음을 보낼때 두번째 이후 패치들은 첫 번째 패치에 대한 답장
형식으로 보내야 받는쪽에서 한 쓰레드로 한꺼번에 받을수 있다.  git 이나 quilt
같은 툴들은 패치셋을 적절하게 한 쓰레드로 보낼수 있는 명령어를 가지고 있다.
그러나 예외적으로 아주 많은 양의 패치 묶음이 있고 git을 사용하는 경우라면, 너무
많은 중첩을 피하기 위해 --chain-reply-to 옵션은 피해야 한다.
